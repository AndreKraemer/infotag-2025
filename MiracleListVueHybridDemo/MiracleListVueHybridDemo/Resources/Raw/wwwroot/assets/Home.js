import{E as Ro,R as Ao,T as No,a as jo,c as Mo,e as Lo,b as ko,g as Fo,d as Uo,i as Ho,f as Jr,h as Qr,j as an,k as Wo,m as Vo,o as Bo,l as Go,p as Ko,r as hn,n as zo,q as lt,s as Xo,t as Yo,u as Jo,v as Qo,w as Zo,x as qo,y as _o,z as ta,A as ea,B,C as na,D as ra,F as ge,G as oa,H as Zr,I as Bt,J as aa,K as ia,L as sa,M as la,N as ca,O as ua,P as fa,Q as Me,S as da,U as ha,V as ga,W as pa,X as va,Y as ma,Z as ya,_ as ba,$ as Sa,a0 as Ea,a1 as st,a2 as wa,a3 as te,a4 as Et,a5 as F,a6 as xa,a7 as Ta,a8 as Ca,a9 as Ia,aa as Oa,ab as je,ac as qe,ad as Da,ae as gn,af as Pa,ag as $a,ah as Ra,ai as Aa,aj as Na,ak as ja,al as Ma,am as qr,an as La,ao as ka,ap as Fa,aq as Ua,ar as Ha,as as Wa,at as Va,au as Ba,av as Ga,aw as Ka,ax as sn,ay as za,az as Xa,aA as Ya,aB as Ja,aC as Qa,aD as Za,aE as rr,aF as qa,aG as _r,aH as to,aI as _a,aJ as ti,aK as ei,aL as Hn,aM as ni,aN as ri,aO as oi,aP as dr,aQ as ai,aR as wt,aS as ii,aT as or,aU as si,aV as li,aW as ci,aX as ln,aY as ui,aZ as fi,a_ as di,a$ as hi,b0 as gi,b1 as pi,b2 as vi,b3 as mi,b4 as yi,b5 as bi,b6 as Si,b7 as Ei,b8 as wi,b9 as xi,ba as Ti,bb as Ci,bc as Ii,bd as Oi,be as Di,bf as Pi,bg as $i,bh as Ri,bi as ye,bj as eo,bk as Ai,bl as Ni,bm as ji,bn as no,bo as Mi,bp as oe,bq as Li,br as ki,bs as Fi,bt as Ui,bu as Hi,bv as Wi,bw as Vi,bx as Bi,by as Gi,bz as Ki,bA as zi,bB as Xi,bC as Yi,bD as Ji,bE as Qi,bF as Zi,bG as ro,bH as qi,bI as _i,bJ as oo,bK as ve,bL as ts,bM as es,bN as Re,bO as hr,bP as ns,bQ as gr,bR as dt,bS as rs,bT as re,bU as _e,bV as os}from"./index.js";import{_ as ao}from"./_plugin-vue_export-helper.js";/**
* vue v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const as=()=>{},is=Object.freeze(Object.defineProperty({__proto__:null,compile:as,EffectScope:Ro,ReactiveEffect:Ao,TrackOpTypes:No,TriggerOpTypes:jo,customRef:Mo,effect:Lo,effectScope:ko,getCurrentScope:Fo,getCurrentWatcher:Uo,isProxy:Ho,isReactive:Jr,isReadonly:Qr,isRef:an,isShallow:Wo,markRaw:Vo,onScopeDispose:Bo,onWatcherCleanup:Go,proxyRefs:Ko,reactive:hn,readonly:zo,ref:lt,shallowReactive:Xo,shallowReadonly:Yo,shallowRef:Jo,stop:Qo,toRaw:Zo,toRef:qo,toRefs:_o,toValue:ta,triggerRef:ea,unref:B,camelize:na,capitalize:ra,normalizeClass:ge,normalizeProps:oa,normalizeStyle:Zr,toDisplayString:Bt,toHandlerKey:aa,BaseTransition:ia,BaseTransitionPropsValidators:sa,Comment:la,DeprecationTypes:ca,ErrorCodes:ua,ErrorTypeStrings:fa,Fragment:Me,KeepAlive:da,Static:ha,Suspense:ga,Teleport:pa,Text:va,assertNumber:ma,callWithAsyncErrorHandling:ya,callWithErrorHandling:ba,cloneVNode:Sa,compatUtils:Ea,computed:st,createBlock:wa,createCommentVNode:te,createElementBlock:Et,createElementVNode:F,createHydrationRenderer:xa,createPropsRestProxy:Ta,createRenderer:Ca,createSlots:Ia,createStaticVNode:Oa,createTextVNode:je,createVNode:qe,defineAsyncComponent:Da,defineComponent:gn,defineEmits:Pa,defineExpose:$a,defineModel:Ra,defineOptions:Aa,defineProps:Na,defineSlots:ja,devtools:Ma,getCurrentInstance:qr,getTransitionRawChildren:La,guardReactiveProps:ka,h:Fa,handleError:Ua,hasInjectionContext:Ha,hydrateOnIdle:Wa,hydrateOnInteraction:Va,hydrateOnMediaQuery:Ba,hydrateOnVisible:Ga,initCustomFormatter:Ka,inject:sn,isMemoSame:za,isRuntimeOnly:Xa,isVNode:Ya,mergeDefaults:Ja,mergeModels:Qa,mergeProps:Za,nextTick:rr,onActivated:qa,onBeforeMount:_r,onBeforeUnmount:to,onBeforeUpdate:_a,onDeactivated:ti,onErrorCaptured:ei,onMounted:Hn,onRenderTracked:ni,onRenderTriggered:ri,onServerPrefetch:oi,onUnmounted:dr,onUpdated:ai,openBlock:wt,popScopeId:ii,provide:or,pushScopeId:si,queuePostFlushCb:li,registerRuntimeCompiler:ci,renderList:ln,renderSlot:ui,resolveComponent:fi,resolveDirective:di,resolveDynamicComponent:hi,resolveFilter:gi,resolveTransitionHooks:pi,setBlockTracking:vi,setDevtoolsHook:mi,setTransitionHooks:yi,ssrContextKey:bi,ssrUtils:Si,toHandlers:Ei,transformVNodeArgs:wi,useAttrs:xi,useId:Ti,useModel:Ci,useSSRContext:Ii,useSlots:Oi,useTemplateRef:Di,useTransitionState:Pi,version:$i,warn:Ri,watch:ye,watchEffect:eo,watchPostEffect:Ai,watchSyncEffect:Ni,withAsyncContext:ji,withCtx:no,withDefaults:Mi,withDirectives:oe,withMemo:Li,withScopeId:ki,Transition:Fi,TransitionGroup:Ui,VueElement:Hi,createApp:Wi,createSSRApp:Vi,defineCustomElement:Bi,defineSSRCustomElement:Gi,hydrate:Ki,initDirectivesForSSR:zi,render:Xi,useCssModule:Yi,useCssVars:Ji,useHost:Qi,useShadowRoot:Zi,vModelCheckbox:ro,vModelDynamic:qi,vModelRadio:_i,vModelSelect:oo,vModelText:ve,vShow:ts,withKeys:es,withModifiers:Re},Symbol.toStringTag,{value:"Module"}));var ss=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function ls(a){return a&&a.__esModule&&Object.prototype.hasOwnProperty.call(a,"default")?a.default:a}function io(a){var t=a.default;if(typeof t=="function"){var n=function(){return t.apply(this,arguments)};n.prototype=t.prototype}else n={};return Object.defineProperty(n,"__esModule",{value:!0}),Object.keys(a).forEach(function(o){var r=Object.getOwnPropertyDescriptor(a,o);Object.defineProperty(n,o,r.get?r:{enumerable:!0,get:function(){return a[o]}})}),n}var so={exports:{}};const cs=io(is);/**!
 * Sortable 1.14.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */function Tr(a,t){var n=Object.keys(a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(a);t&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(a,r).enumerable})),n.push.apply(n,o)}return n}function ie(a){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?Tr(Object(n),!0).forEach(function(o){us(a,o,n[o])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(n)):Tr(Object(n)).forEach(function(o){Object.defineProperty(a,o,Object.getOwnPropertyDescriptor(n,o))})}return a}function In(a){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?In=function(t){return typeof t}:In=function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},In(a)}function us(a,t,n){return t in a?Object.defineProperty(a,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):a[t]=n,a}function Jt(){return Jt=Object.assign||function(a){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(a[o]=n[o])}return a},Jt.apply(this,arguments)}function fs(a,t){if(a==null)return{};var n={},o=Object.keys(a),r,s;for(s=0;s<o.length;s++)r=o[s],!(t.indexOf(r)>=0)&&(n[r]=a[r]);return n}function ds(a,t){if(a==null)return{};var n=fs(a,t),o,r;if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(a);for(r=0;r<s.length;r++)o=s[r],!(t.indexOf(o)>=0)&&(!Object.prototype.propertyIsEnumerable.call(a,o)||(n[o]=a[o]))}return n}function hs(a){return gs(a)||ps(a)||vs(a)||ms()}function gs(a){if(Array.isArray(a))return ar(a)}function ps(a){if(typeof Symbol<"u"&&a[Symbol.iterator]!=null||a["@@iterator"]!=null)return Array.from(a)}function vs(a,t){if(!!a){if(typeof a=="string")return ar(a,t);var n=Object.prototype.toString.call(a).slice(8,-1);if(n==="Object"&&a.constructor&&(n=a.constructor.name),n==="Map"||n==="Set")return Array.from(a);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ar(a,t)}}function ar(a,t){(t==null||t>a.length)&&(t=a.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=a[n];return o}function ms(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var ys="1.14.0";function le(a){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(a)}var ce=le(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),pn=le(/Edge/i),Cr=le(/firefox/i),tn=le(/safari/i)&&!le(/chrome/i)&&!le(/android/i),lo=le(/iP(ad|od|hone)/i),bs=le(/chrome/i)&&le(/android/i),co={capture:!1,passive:!1};function tt(a,t,n){a.addEventListener(t,n,!ce&&co)}function _(a,t,n){a.removeEventListener(t,n,!ce&&co)}function An(a,t){if(!!t){if(t[0]===">"&&(t=t.substring(1)),a)try{if(a.matches)return a.matches(t);if(a.msMatchesSelector)return a.msMatchesSelector(t);if(a.webkitMatchesSelector)return a.webkitMatchesSelector(t)}catch{return!1}return!1}}function Ss(a){return a.host&&a!==document&&a.host.nodeType?a.host:a.parentNode}function _t(a,t,n,o){if(a){n=n||document;do{if(t!=null&&(t[0]===">"?a.parentNode===n&&An(a,t):An(a,t))||o&&a===n)return a;if(a===n)break}while(a=Ss(a))}return null}var Ir=/\s+/g;function yt(a,t,n){if(a&&t)if(a.classList)a.classList[n?"add":"remove"](t);else{var o=(" "+a.className+" ").replace(Ir," ").replace(" "+t+" "," ");a.className=(o+(n?" "+t:"")).replace(Ir," ")}}function W(a,t,n){var o=a&&a.style;if(o){if(n===void 0)return document.defaultView&&document.defaultView.getComputedStyle?n=document.defaultView.getComputedStyle(a,""):a.currentStyle&&(n=a.currentStyle),t===void 0?n:n[t];!(t in o)&&t.indexOf("webkit")===-1&&(t="-webkit-"+t),o[t]=n+(typeof n=="string"?"":"px")}}function Ce(a,t){var n="";if(typeof a=="string")n=a;else do{var o=W(a,"transform");o&&o!=="none"&&(n=o+" "+n)}while(!t&&(a=a.parentNode));var r=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return r&&new r(n)}function uo(a,t,n){if(a){var o=a.getElementsByTagName(t),r=0,s=o.length;if(n)for(;r<s;r++)n(o[r],r);return o}return[]}function ae(){var a=document.scrollingElement;return a||document.documentElement}function vt(a,t,n,o,r){if(!(!a.getBoundingClientRect&&a!==window)){var s,e,i,l,c,f,u;if(a!==window&&a.parentNode&&a!==ae()?(s=a.getBoundingClientRect(),e=s.top,i=s.left,l=s.bottom,c=s.right,f=s.height,u=s.width):(e=0,i=0,l=window.innerHeight,c=window.innerWidth,f=window.innerHeight,u=window.innerWidth),(t||n)&&a!==window&&(r=r||a.parentNode,!ce))do if(r&&r.getBoundingClientRect&&(W(r,"transform")!=="none"||n&&W(r,"position")!=="static")){var d=r.getBoundingClientRect();e-=d.top+parseInt(W(r,"border-top-width")),i-=d.left+parseInt(W(r,"border-left-width")),l=e+s.height,c=i+s.width;break}while(r=r.parentNode);if(o&&a!==window){var g=Ce(r||a),h=g&&g.a,p=g&&g.d;g&&(e/=p,i/=h,u/=h,f/=p,l=e+f,c=i+u)}return{top:e,left:i,bottom:l,right:c,width:u,height:f}}}function Or(a,t,n){for(var o=me(a,!0),r=vt(a)[t];o;){var s=vt(o)[n],e=void 0;if(n==="top"||n==="left"?e=r>=s:e=r<=s,!e)return o;if(o===ae())break;o=me(o,!1)}return!1}function Le(a,t,n,o){for(var r=0,s=0,e=a.children;s<e.length;){if(e[s].style.display!=="none"&&e[s]!==z.ghost&&(o||e[s]!==z.dragged)&&_t(e[s],n.draggable,a,!1)){if(r===t)return e[s];r++}s++}return null}function pr(a,t){for(var n=a.lastElementChild;n&&(n===z.ghost||W(n,"display")==="none"||t&&!An(n,t));)n=n.previousElementSibling;return n||null}function xt(a,t){var n=0;if(!a||!a.parentNode)return-1;for(;a=a.previousElementSibling;)a.nodeName.toUpperCase()!=="TEMPLATE"&&a!==z.clone&&(!t||An(a,t))&&n++;return n}function Dr(a){var t=0,n=0,o=ae();if(a)do{var r=Ce(a),s=r.a,e=r.d;t+=a.scrollLeft*s,n+=a.scrollTop*e}while(a!==o&&(a=a.parentNode));return[t,n]}function Es(a,t){for(var n in a)if(!!a.hasOwnProperty(n)){for(var o in t)if(t.hasOwnProperty(o)&&t[o]===a[n][o])return Number(n)}return-1}function me(a,t){if(!a||!a.getBoundingClientRect)return ae();var n=a,o=!1;do if(n.clientWidth<n.scrollWidth||n.clientHeight<n.scrollHeight){var r=W(n);if(n.clientWidth<n.scrollWidth&&(r.overflowX=="auto"||r.overflowX=="scroll")||n.clientHeight<n.scrollHeight&&(r.overflowY=="auto"||r.overflowY=="scroll")){if(!n.getBoundingClientRect||n===document.body)return ae();if(o||t)return n;o=!0}}while(n=n.parentNode);return ae()}function ws(a,t){if(a&&t)for(var n in t)t.hasOwnProperty(n)&&(a[n]=t[n]);return a}function zn(a,t){return Math.round(a.top)===Math.round(t.top)&&Math.round(a.left)===Math.round(t.left)&&Math.round(a.height)===Math.round(t.height)&&Math.round(a.width)===Math.round(t.width)}var en;function fo(a,t){return function(){if(!en){var n=arguments,o=this;n.length===1?a.call(o,n[0]):a.apply(o,n),en=setTimeout(function(){en=void 0},t)}}}function xs(){clearTimeout(en),en=void 0}function ho(a,t,n){a.scrollLeft+=t,a.scrollTop+=n}function vr(a){var t=window.Polymer,n=window.jQuery||window.Zepto;return t&&t.dom?t.dom(a).cloneNode(!0):n?n(a).clone(!0)[0]:a.cloneNode(!0)}function Pr(a,t){W(a,"position","absolute"),W(a,"top",t.top),W(a,"left",t.left),W(a,"width",t.width),W(a,"height",t.height)}function Xn(a){W(a,"position",""),W(a,"top",""),W(a,"left",""),W(a,"width",""),W(a,"height","")}var kt="Sortable"+new Date().getTime();function Ts(){var a=[],t;return{captureAnimationState:function(){if(a=[],!!this.options.animation){var o=[].slice.call(this.el.children);o.forEach(function(r){if(!(W(r,"display")==="none"||r===z.ghost)){a.push({target:r,rect:vt(r)});var s=ie({},a[a.length-1].rect);if(r.thisAnimationDuration){var e=Ce(r,!0);e&&(s.top-=e.f,s.left-=e.e)}r.fromRect=s}})}},addAnimationState:function(o){a.push(o)},removeAnimationState:function(o){a.splice(Es(a,{target:o}),1)},animateAll:function(o){var r=this;if(!this.options.animation){clearTimeout(t),typeof o=="function"&&o();return}var s=!1,e=0;a.forEach(function(i){var l=0,c=i.target,f=c.fromRect,u=vt(c),d=c.prevFromRect,g=c.prevToRect,h=i.rect,p=Ce(c,!0);p&&(u.top-=p.f,u.left-=p.e),c.toRect=u,c.thisAnimationDuration&&zn(d,u)&&!zn(f,u)&&(h.top-u.top)/(h.left-u.left)===(f.top-u.top)/(f.left-u.left)&&(l=Is(h,d,g,r.options)),zn(u,f)||(c.prevFromRect=f,c.prevToRect=u,l||(l=r.options.animation),r.animate(c,h,u,l)),l&&(s=!0,e=Math.max(e,l),clearTimeout(c.animationResetTimer),c.animationResetTimer=setTimeout(function(){c.animationTime=0,c.prevFromRect=null,c.fromRect=null,c.prevToRect=null,c.thisAnimationDuration=null},l),c.thisAnimationDuration=l)}),clearTimeout(t),s?t=setTimeout(function(){typeof o=="function"&&o()},e):typeof o=="function"&&o(),a=[]},animate:function(o,r,s,e){if(e){W(o,"transition",""),W(o,"transform","");var i=Ce(this.el),l=i&&i.a,c=i&&i.d,f=(r.left-s.left)/(l||1),u=(r.top-s.top)/(c||1);o.animatingX=!!f,o.animatingY=!!u,W(o,"transform","translate3d("+f+"px,"+u+"px,0)"),this.forRepaintDummy=Cs(o),W(o,"transition","transform "+e+"ms"+(this.options.easing?" "+this.options.easing:"")),W(o,"transform","translate3d(0,0,0)"),typeof o.animated=="number"&&clearTimeout(o.animated),o.animated=setTimeout(function(){W(o,"transition",""),W(o,"transform",""),o.animated=!1,o.animatingX=!1,o.animatingY=!1},e)}}}}function Cs(a){return a.offsetWidth}function Is(a,t,n,o){return Math.sqrt(Math.pow(t.top-a.top,2)+Math.pow(t.left-a.left,2))/Math.sqrt(Math.pow(t.top-n.top,2)+Math.pow(t.left-n.left,2))*o.animation}var De=[],Yn={initializeByDefault:!0},vn={mount:function(t){for(var n in Yn)Yn.hasOwnProperty(n)&&!(n in t)&&(t[n]=Yn[n]);De.forEach(function(o){if(o.pluginName===t.pluginName)throw"Sortable: Cannot mount plugin ".concat(t.pluginName," more than once")}),De.push(t)},pluginEvent:function(t,n,o){var r=this;this.eventCanceled=!1,o.cancel=function(){r.eventCanceled=!0};var s=t+"Global";De.forEach(function(e){!n[e.pluginName]||(n[e.pluginName][s]&&n[e.pluginName][s](ie({sortable:n},o)),n.options[e.pluginName]&&n[e.pluginName][t]&&n[e.pluginName][t](ie({sortable:n},o)))})},initializePlugins:function(t,n,o,r){De.forEach(function(i){var l=i.pluginName;if(!(!t.options[l]&&!i.initializeByDefault)){var c=new i(t,n,t.options);c.sortable=t,c.options=t.options,t[l]=c,Jt(o,c.defaults)}});for(var s in t.options)if(!!t.options.hasOwnProperty(s)){var e=this.modifyOption(t,s,t.options[s]);typeof e<"u"&&(t.options[s]=e)}},getEventProperties:function(t,n){var o={};return De.forEach(function(r){typeof r.eventProperties=="function"&&Jt(o,r.eventProperties.call(n[r.pluginName],t))}),o},modifyOption:function(t,n,o){var r;return De.forEach(function(s){!t[s.pluginName]||s.optionListeners&&typeof s.optionListeners[n]=="function"&&(r=s.optionListeners[n].call(t[s.pluginName],o))}),r}};function Ye(a){var t=a.sortable,n=a.rootEl,o=a.name,r=a.targetEl,s=a.cloneEl,e=a.toEl,i=a.fromEl,l=a.oldIndex,c=a.newIndex,f=a.oldDraggableIndex,u=a.newDraggableIndex,d=a.originalEvent,g=a.putSortable,h=a.extraEventProperties;if(t=t||n&&n[kt],!!t){var p,v=t.options,m="on"+o.charAt(0).toUpperCase()+o.substr(1);window.CustomEvent&&!ce&&!pn?p=new CustomEvent(o,{bubbles:!0,cancelable:!0}):(p=document.createEvent("Event"),p.initEvent(o,!0,!0)),p.to=e||n,p.from=i||n,p.item=r||n,p.clone=s,p.oldIndex=l,p.newIndex=c,p.oldDraggableIndex=f,p.newDraggableIndex=u,p.originalEvent=d,p.pullMode=g?g.lastPutMode:void 0;var y=ie(ie({},h),vn.getEventProperties(o,t));for(var O in y)p[O]=y[O];n&&n.dispatchEvent(p),v[m]&&v[m].call(t,p)}}var Os=["evt"],Wt=function(t,n){var o=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},r=o.evt,s=ds(o,Os);vn.pluginEvent.bind(z)(t,n,ie({dragEl:N,parentEl:bt,ghostEl:Q,rootEl:gt,nextEl:Te,lastDownEl:On,cloneEl:St,cloneHidden:pe,dragStarted:Je,putSortable:Nt,activeSortable:z.active,originalEvent:r,oldIndex:Ne,oldDraggableIndex:nn,newIndex:zt,newDraggableIndex:de,hideGhostForTarget:mo,unhideGhostForTarget:yo,cloneNowHidden:function(){pe=!0},cloneNowShown:function(){pe=!1},dispatchSortableEvent:function(i){Ut({sortable:n,name:i,originalEvent:r})}},s))};function Ut(a){Ye(ie({putSortable:Nt,cloneEl:St,targetEl:N,rootEl:gt,oldIndex:Ne,oldDraggableIndex:nn,newIndex:zt,newDraggableIndex:de},a))}var N,bt,Q,gt,Te,On,St,pe,Ne,zt,nn,de,bn,Nt,Ae=!1,Nn=!1,jn=[],we,Zt,Jn,Qn,$r,Rr,Je,Pe,rn,on=!1,Sn=!1,Dn,Mt,Zn=[],ir=!1,Mn=[],Wn=typeof document<"u",En=lo,Ar=pn||ce?"cssFloat":"float",Ds=Wn&&!bs&&!lo&&"draggable"in document.createElement("div"),go=function(){if(!!Wn){if(ce)return!1;var a=document.createElement("x");return a.style.cssText="pointer-events:auto",a.style.pointerEvents==="auto"}}(),po=function(t,n){var o=W(t),r=parseInt(o.width)-parseInt(o.paddingLeft)-parseInt(o.paddingRight)-parseInt(o.borderLeftWidth)-parseInt(o.borderRightWidth),s=Le(t,0,n),e=Le(t,1,n),i=s&&W(s),l=e&&W(e),c=i&&parseInt(i.marginLeft)+parseInt(i.marginRight)+vt(s).width,f=l&&parseInt(l.marginLeft)+parseInt(l.marginRight)+vt(e).width;if(o.display==="flex")return o.flexDirection==="column"||o.flexDirection==="column-reverse"?"vertical":"horizontal";if(o.display==="grid")return o.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(s&&i.float&&i.float!=="none"){var u=i.float==="left"?"left":"right";return e&&(l.clear==="both"||l.clear===u)?"vertical":"horizontal"}return s&&(i.display==="block"||i.display==="flex"||i.display==="table"||i.display==="grid"||c>=r&&o[Ar]==="none"||e&&o[Ar]==="none"&&c+f>r)?"vertical":"horizontal"},Ps=function(t,n,o){var r=o?t.left:t.top,s=o?t.right:t.bottom,e=o?t.width:t.height,i=o?n.left:n.top,l=o?n.right:n.bottom,c=o?n.width:n.height;return r===i||s===l||r+e/2===i+c/2},$s=function(t,n){var o;return jn.some(function(r){var s=r[kt].options.emptyInsertThreshold;if(!(!s||pr(r))){var e=vt(r),i=t>=e.left-s&&t<=e.right+s,l=n>=e.top-s&&n<=e.bottom+s;if(i&&l)return o=r}}),o},vo=function(t){function n(s,e){return function(i,l,c,f){var u=i.options.group.name&&l.options.group.name&&i.options.group.name===l.options.group.name;if(s==null&&(e||u))return!0;if(s==null||s===!1)return!1;if(e&&s==="clone")return s;if(typeof s=="function")return n(s(i,l,c,f),e)(i,l,c,f);var d=(e?i:l).options.group.name;return s===!0||typeof s=="string"&&s===d||s.join&&s.indexOf(d)>-1}}var o={},r=t.group;(!r||In(r)!="object")&&(r={name:r}),o.name=r.name,o.checkPull=n(r.pull,!0),o.checkPut=n(r.put),o.revertClone=r.revertClone,t.group=o},mo=function(){!go&&Q&&W(Q,"display","none")},yo=function(){!go&&Q&&W(Q,"display","")};Wn&&document.addEventListener("click",function(a){if(Nn)return a.preventDefault(),a.stopPropagation&&a.stopPropagation(),a.stopImmediatePropagation&&a.stopImmediatePropagation(),Nn=!1,!1},!0);var xe=function(t){if(N){t=t.touches?t.touches[0]:t;var n=$s(t.clientX,t.clientY);if(n){var o={};for(var r in t)t.hasOwnProperty(r)&&(o[r]=t[r]);o.target=o.rootEl=n,o.preventDefault=void 0,o.stopPropagation=void 0,n[kt]._onDragOver(o)}}},Rs=function(t){N&&N.parentNode[kt]._isOutsideThisEl(t.target)};function z(a,t){if(!(a&&a.nodeType&&a.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(a));this.el=a,this.options=t=Jt({},t),a[kt]=this;var n={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(a.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return po(a,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(e,i){e.setData("Text",i.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:z.supportPointer!==!1&&"PointerEvent"in window&&!tn,emptyInsertThreshold:5};vn.initializePlugins(this,a,n);for(var o in n)!(o in t)&&(t[o]=n[o]);vo(t);for(var r in this)r.charAt(0)==="_"&&typeof this[r]=="function"&&(this[r]=this[r].bind(this));this.nativeDraggable=t.forceFallback?!1:Ds,this.nativeDraggable&&(this.options.touchStartThreshold=1),t.supportPointer?tt(a,"pointerdown",this._onTapStart):(tt(a,"mousedown",this._onTapStart),tt(a,"touchstart",this._onTapStart)),this.nativeDraggable&&(tt(a,"dragover",this),tt(a,"dragenter",this)),jn.push(this.el),t.store&&t.store.get&&this.sort(t.store.get(this)||[]),Jt(this,Ts())}z.prototype={constructor:z,_isOutsideThisEl:function(t){!this.el.contains(t)&&t!==this.el&&(Pe=null)},_getDirection:function(t,n){return typeof this.options.direction=="function"?this.options.direction.call(this,t,n,N):this.options.direction},_onTapStart:function(t){if(!!t.cancelable){var n=this,o=this.el,r=this.options,s=r.preventOnFilter,e=t.type,i=t.touches&&t.touches[0]||t.pointerType&&t.pointerType==="touch"&&t,l=(i||t).target,c=t.target.shadowRoot&&(t.path&&t.path[0]||t.composedPath&&t.composedPath()[0])||l,f=r.filter;if(Us(o),!N&&!(/mousedown|pointerdown/.test(e)&&t.button!==0||r.disabled)&&!c.isContentEditable&&!(!this.nativeDraggable&&tn&&l&&l.tagName.toUpperCase()==="SELECT")&&(l=_t(l,r.draggable,o,!1),!(l&&l.animated)&&On!==l)){if(Ne=xt(l),nn=xt(l,r.draggable),typeof f=="function"){if(f.call(this,t,l,this)){Ut({sortable:n,rootEl:c,name:"filter",targetEl:l,toEl:o,fromEl:o}),Wt("filter",n,{evt:t}),s&&t.cancelable&&t.preventDefault();return}}else if(f&&(f=f.split(",").some(function(u){if(u=_t(c,u.trim(),o,!1),u)return Ut({sortable:n,rootEl:u,name:"filter",targetEl:l,fromEl:o,toEl:o}),Wt("filter",n,{evt:t}),!0}),f)){s&&t.cancelable&&t.preventDefault();return}r.handle&&!_t(c,r.handle,o,!1)||this._prepareDragStart(t,i,l)}}},_prepareDragStart:function(t,n,o){var r=this,s=r.el,e=r.options,i=s.ownerDocument,l;if(o&&!N&&o.parentNode===s){var c=vt(o);if(gt=s,N=o,bt=N.parentNode,Te=N.nextSibling,On=o,bn=e.group,z.dragged=N,we={target:N,clientX:(n||t).clientX,clientY:(n||t).clientY},$r=we.clientX-c.left,Rr=we.clientY-c.top,this._lastX=(n||t).clientX,this._lastY=(n||t).clientY,N.style["will-change"]="all",l=function(){if(Wt("delayEnded",r,{evt:t}),z.eventCanceled){r._onDrop();return}r._disableDelayedDragEvents(),!Cr&&r.nativeDraggable&&(N.draggable=!0),r._triggerDragStart(t,n),Ut({sortable:r,name:"choose",originalEvent:t}),yt(N,e.chosenClass,!0)},e.ignore.split(",").forEach(function(f){uo(N,f.trim(),qn)}),tt(i,"dragover",xe),tt(i,"mousemove",xe),tt(i,"touchmove",xe),tt(i,"mouseup",r._onDrop),tt(i,"touchend",r._onDrop),tt(i,"touchcancel",r._onDrop),Cr&&this.nativeDraggable&&(this.options.touchStartThreshold=4,N.draggable=!0),Wt("delayStart",this,{evt:t}),e.delay&&(!e.delayOnTouchOnly||n)&&(!this.nativeDraggable||!(pn||ce))){if(z.eventCanceled){this._onDrop();return}tt(i,"mouseup",r._disableDelayedDrag),tt(i,"touchend",r._disableDelayedDrag),tt(i,"touchcancel",r._disableDelayedDrag),tt(i,"mousemove",r._delayedDragTouchMoveHandler),tt(i,"touchmove",r._delayedDragTouchMoveHandler),e.supportPointer&&tt(i,"pointermove",r._delayedDragTouchMoveHandler),r._dragStartTimer=setTimeout(l,e.delay)}else l()}},_delayedDragTouchMoveHandler:function(t){var n=t.touches?t.touches[0]:t;Math.max(Math.abs(n.clientX-this._lastX),Math.abs(n.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){N&&qn(N),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var t=this.el.ownerDocument;_(t,"mouseup",this._disableDelayedDrag),_(t,"touchend",this._disableDelayedDrag),_(t,"touchcancel",this._disableDelayedDrag),_(t,"mousemove",this._delayedDragTouchMoveHandler),_(t,"touchmove",this._delayedDragTouchMoveHandler),_(t,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(t,n){n=n||t.pointerType=="touch"&&t,!this.nativeDraggable||n?this.options.supportPointer?tt(document,"pointermove",this._onTouchMove):n?tt(document,"touchmove",this._onTouchMove):tt(document,"mousemove",this._onTouchMove):(tt(N,"dragend",this),tt(gt,"dragstart",this._onDragStart));try{document.selection?Pn(function(){document.selection.empty()}):window.getSelection().removeAllRanges()}catch{}},_dragStarted:function(t,n){if(Ae=!1,gt&&N){Wt("dragStarted",this,{evt:n}),this.nativeDraggable&&tt(document,"dragover",Rs);var o=this.options;!t&&yt(N,o.dragClass,!1),yt(N,o.ghostClass,!0),z.active=this,t&&this._appendGhost(),Ut({sortable:this,name:"start",originalEvent:n})}else this._nulling()},_emulateDragOver:function(){if(Zt){this._lastX=Zt.clientX,this._lastY=Zt.clientY,mo();for(var t=document.elementFromPoint(Zt.clientX,Zt.clientY),n=t;t&&t.shadowRoot&&(t=t.shadowRoot.elementFromPoint(Zt.clientX,Zt.clientY),t!==n);)n=t;if(N.parentNode[kt]._isOutsideThisEl(t),n)do{if(n[kt]){var o=void 0;if(o=n[kt]._onDragOver({clientX:Zt.clientX,clientY:Zt.clientY,target:t,rootEl:n}),o&&!this.options.dragoverBubble)break}t=n}while(n=n.parentNode);yo()}},_onTouchMove:function(t){if(we){var n=this.options,o=n.fallbackTolerance,r=n.fallbackOffset,s=t.touches?t.touches[0]:t,e=Q&&Ce(Q,!0),i=Q&&e&&e.a,l=Q&&e&&e.d,c=En&&Mt&&Dr(Mt),f=(s.clientX-we.clientX+r.x)/(i||1)+(c?c[0]-Zn[0]:0)/(i||1),u=(s.clientY-we.clientY+r.y)/(l||1)+(c?c[1]-Zn[1]:0)/(l||1);if(!z.active&&!Ae){if(o&&Math.max(Math.abs(s.clientX-this._lastX),Math.abs(s.clientY-this._lastY))<o)return;this._onDragStart(t,!0)}if(Q){e?(e.e+=f-(Jn||0),e.f+=u-(Qn||0)):e={a:1,b:0,c:0,d:1,e:f,f:u};var d="matrix(".concat(e.a,",").concat(e.b,",").concat(e.c,",").concat(e.d,",").concat(e.e,",").concat(e.f,")");W(Q,"webkitTransform",d),W(Q,"mozTransform",d),W(Q,"msTransform",d),W(Q,"transform",d),Jn=f,Qn=u,Zt=s}t.cancelable&&t.preventDefault()}},_appendGhost:function(){if(!Q){var t=this.options.fallbackOnBody?document.body:gt,n=vt(N,!0,En,!0,t),o=this.options;if(En){for(Mt=t;W(Mt,"position")==="static"&&W(Mt,"transform")==="none"&&Mt!==document;)Mt=Mt.parentNode;Mt!==document.body&&Mt!==document.documentElement?(Mt===document&&(Mt=ae()),n.top+=Mt.scrollTop,n.left+=Mt.scrollLeft):Mt=ae(),Zn=Dr(Mt)}Q=N.cloneNode(!0),yt(Q,o.ghostClass,!1),yt(Q,o.fallbackClass,!0),yt(Q,o.dragClass,!0),W(Q,"transition",""),W(Q,"transform",""),W(Q,"box-sizing","border-box"),W(Q,"margin",0),W(Q,"top",n.top),W(Q,"left",n.left),W(Q,"width",n.width),W(Q,"height",n.height),W(Q,"opacity","0.8"),W(Q,"position",En?"absolute":"fixed"),W(Q,"zIndex","100000"),W(Q,"pointerEvents","none"),z.ghost=Q,t.appendChild(Q),W(Q,"transform-origin",$r/parseInt(Q.style.width)*100+"% "+Rr/parseInt(Q.style.height)*100+"%")}},_onDragStart:function(t,n){var o=this,r=t.dataTransfer,s=o.options;if(Wt("dragStart",this,{evt:t}),z.eventCanceled){this._onDrop();return}Wt("setupClone",this),z.eventCanceled||(St=vr(N),St.draggable=!1,St.style["will-change"]="",this._hideClone(),yt(St,this.options.chosenClass,!1),z.clone=St),o.cloneId=Pn(function(){Wt("clone",o),!z.eventCanceled&&(o.options.removeCloneOnHide||gt.insertBefore(St,N),o._hideClone(),Ut({sortable:o,name:"clone"}))}),!n&&yt(N,s.dragClass,!0),n?(Nn=!0,o._loopId=setInterval(o._emulateDragOver,50)):(_(document,"mouseup",o._onDrop),_(document,"touchend",o._onDrop),_(document,"touchcancel",o._onDrop),r&&(r.effectAllowed="move",s.setData&&s.setData.call(o,r,N)),tt(document,"drop",o),W(N,"transform","translateZ(0)")),Ae=!0,o._dragStartId=Pn(o._dragStarted.bind(o,n,t)),tt(document,"selectstart",o),Je=!0,tn&&W(document.body,"user-select","none")},_onDragOver:function(t){var n=this.el,o=t.target,r,s,e,i=this.options,l=i.group,c=z.active,f=bn===l,u=i.sort,d=Nt||c,g,h=this,p=!1;if(ir)return;function v(nt,ct){Wt(nt,h,ie({evt:t,isOwner:f,axis:g?"vertical":"horizontal",revert:e,dragRect:r,targetRect:s,canSort:u,fromSortable:d,target:o,completed:y,onMove:function(it,ot){return wn(gt,n,N,r,it,vt(it),t,ot)},changed:O},ct))}function m(){v("dragOverAnimationCapture"),h.captureAnimationState(),h!==d&&d.captureAnimationState()}function y(nt){return v("dragOverCompleted",{insertion:nt}),nt&&(f?c._hideClone():c._showClone(h),h!==d&&(yt(N,Nt?Nt.options.ghostClass:c.options.ghostClass,!1),yt(N,i.ghostClass,!0)),Nt!==h&&h!==z.active?Nt=h:h===z.active&&Nt&&(Nt=null),d===h&&(h._ignoreWhileAnimating=o),h.animateAll(function(){v("dragOverAnimationComplete"),h._ignoreWhileAnimating=null}),h!==d&&(d.animateAll(),d._ignoreWhileAnimating=null)),(o===N&&!N.animated||o===n&&!o.animated)&&(Pe=null),!i.dragoverBubble&&!t.rootEl&&o!==document&&(N.parentNode[kt]._isOutsideThisEl(t.target),!nt&&xe(t)),!i.dragoverBubble&&t.stopPropagation&&t.stopPropagation(),p=!0}function O(){zt=xt(N),de=xt(N,i.draggable),Ut({sortable:h,name:"change",toEl:n,newIndex:zt,newDraggableIndex:de,originalEvent:t})}if(t.preventDefault!==void 0&&t.cancelable&&t.preventDefault(),o=_t(o,i.draggable,n,!0),v("dragOver"),z.eventCanceled)return p;if(N.contains(t.target)||o.animated&&o.animatingX&&o.animatingY||h._ignoreWhileAnimating===o)return y(!1);if(Nn=!1,c&&!i.disabled&&(f?u||(e=bt!==gt):Nt===this||(this.lastPutMode=bn.checkPull(this,c,N,t))&&l.checkPut(this,c,N,t))){if(g=this._getDirection(t,o)==="vertical",r=vt(N),v("dragOverValid"),z.eventCanceled)return p;if(e)return bt=gt,m(),this._hideClone(),v("revert"),z.eventCanceled||(Te?gt.insertBefore(N,Te):gt.appendChild(N)),y(!0);var w=pr(n,i.draggable);if(!w||Ms(t,g,this)&&!w.animated){if(w===N)return y(!1);if(w&&n===t.target&&(o=w),o&&(s=vt(o)),wn(gt,n,N,r,o,s,t,!!o)!==!1)return m(),n.appendChild(N),bt=n,O(),y(!0)}else if(w&&js(t,g,this)){var x=Le(n,0,i,!0);if(x===N)return y(!1);if(o=x,s=vt(o),wn(gt,n,N,r,o,s,t,!1)!==!1)return m(),n.insertBefore(N,x),bt=n,O(),y(!0)}else if(o.parentNode===n){s=vt(o);var I=0,L,k=N.parentNode!==n,P=!Ps(N.animated&&N.toRect||r,o.animated&&o.toRect||s,g),M=g?"top":"left",T=Or(o,"top","top")||Or(N,"top","top"),$=T?T.scrollTop:void 0;Pe!==o&&(L=s[M],on=!1,Sn=!P&&i.invertSwap||k),I=Ls(t,o,s,g,P?1:i.swapThreshold,i.invertedSwapThreshold==null?i.swapThreshold:i.invertedSwapThreshold,Sn,Pe===o);var E;if(I!==0){var A=xt(N);do A-=I,E=bt.children[A];while(E&&(W(E,"display")==="none"||E===Q))}if(I===0||E===o)return y(!1);Pe=o,rn=I;var V=o.nextElementSibling,j=!1;j=I===1;var U=wn(gt,n,N,r,o,s,t,j);if(U!==!1)return(U===1||U===-1)&&(j=U===1),ir=!0,setTimeout(Ns,30),m(),j&&!V?n.appendChild(N):o.parentNode.insertBefore(N,j?V:o),T&&ho(T,0,$-T.scrollTop),bt=N.parentNode,L!==void 0&&!Sn&&(Dn=Math.abs(L-vt(o)[M])),O(),y(!0)}if(n.contains(N))return y(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){_(document,"mousemove",this._onTouchMove),_(document,"touchmove",this._onTouchMove),_(document,"pointermove",this._onTouchMove),_(document,"dragover",xe),_(document,"mousemove",xe),_(document,"touchmove",xe)},_offUpEvents:function(){var t=this.el.ownerDocument;_(t,"mouseup",this._onDrop),_(t,"touchend",this._onDrop),_(t,"pointerup",this._onDrop),_(t,"touchcancel",this._onDrop),_(document,"selectstart",this)},_onDrop:function(t){var n=this.el,o=this.options;if(zt=xt(N),de=xt(N,o.draggable),Wt("drop",this,{evt:t}),bt=N&&N.parentNode,zt=xt(N),de=xt(N,o.draggable),z.eventCanceled){this._nulling();return}Ae=!1,Sn=!1,on=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),sr(this.cloneId),sr(this._dragStartId),this.nativeDraggable&&(_(document,"drop",this),_(n,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),tn&&W(document.body,"user-select",""),W(N,"transform",""),t&&(Je&&(t.cancelable&&t.preventDefault(),!o.dropBubble&&t.stopPropagation()),Q&&Q.parentNode&&Q.parentNode.removeChild(Q),(gt===bt||Nt&&Nt.lastPutMode!=="clone")&&St&&St.parentNode&&St.parentNode.removeChild(St),N&&(this.nativeDraggable&&_(N,"dragend",this),qn(N),N.style["will-change"]="",Je&&!Ae&&yt(N,Nt?Nt.options.ghostClass:this.options.ghostClass,!1),yt(N,this.options.chosenClass,!1),Ut({sortable:this,name:"unchoose",toEl:bt,newIndex:null,newDraggableIndex:null,originalEvent:t}),gt!==bt?(zt>=0&&(Ut({rootEl:bt,name:"add",toEl:bt,fromEl:gt,originalEvent:t}),Ut({sortable:this,name:"remove",toEl:bt,originalEvent:t}),Ut({rootEl:bt,name:"sort",toEl:bt,fromEl:gt,originalEvent:t}),Ut({sortable:this,name:"sort",toEl:bt,originalEvent:t})),Nt&&Nt.save()):zt!==Ne&&zt>=0&&(Ut({sortable:this,name:"update",toEl:bt,originalEvent:t}),Ut({sortable:this,name:"sort",toEl:bt,originalEvent:t})),z.active&&((zt==null||zt===-1)&&(zt=Ne,de=nn),Ut({sortable:this,name:"end",toEl:bt,originalEvent:t}),this.save()))),this._nulling()},_nulling:function(){Wt("nulling",this),gt=N=bt=Q=Te=St=On=pe=we=Zt=Je=zt=de=Ne=nn=Pe=rn=Nt=bn=z.dragged=z.ghost=z.clone=z.active=null,Mn.forEach(function(t){t.checked=!0}),Mn.length=Jn=Qn=0},handleEvent:function(t){switch(t.type){case"drop":case"dragend":this._onDrop(t);break;case"dragenter":case"dragover":N&&(this._onDragOver(t),As(t));break;case"selectstart":t.preventDefault();break}},toArray:function(){for(var t=[],n,o=this.el.children,r=0,s=o.length,e=this.options;r<s;r++)n=o[r],_t(n,e.draggable,this.el,!1)&&t.push(n.getAttribute(e.dataIdAttr)||Fs(n));return t},sort:function(t,n){var o={},r=this.el;this.toArray().forEach(function(s,e){var i=r.children[e];_t(i,this.options.draggable,r,!1)&&(o[s]=i)},this),n&&this.captureAnimationState(),t.forEach(function(s){o[s]&&(r.removeChild(o[s]),r.appendChild(o[s]))}),n&&this.animateAll()},save:function(){var t=this.options.store;t&&t.set&&t.set(this)},closest:function(t,n){return _t(t,n||this.options.draggable,this.el,!1)},option:function(t,n){var o=this.options;if(n===void 0)return o[t];var r=vn.modifyOption(this,t,n);typeof r<"u"?o[t]=r:o[t]=n,t==="group"&&vo(o)},destroy:function(){Wt("destroy",this);var t=this.el;t[kt]=null,_(t,"mousedown",this._onTapStart),_(t,"touchstart",this._onTapStart),_(t,"pointerdown",this._onTapStart),this.nativeDraggable&&(_(t,"dragover",this),_(t,"dragenter",this)),Array.prototype.forEach.call(t.querySelectorAll("[draggable]"),function(n){n.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),jn.splice(jn.indexOf(this.el),1),this.el=t=null},_hideClone:function(){if(!pe){if(Wt("hideClone",this),z.eventCanceled)return;W(St,"display","none"),this.options.removeCloneOnHide&&St.parentNode&&St.parentNode.removeChild(St),pe=!0}},_showClone:function(t){if(t.lastPutMode!=="clone"){this._hideClone();return}if(pe){if(Wt("showClone",this),z.eventCanceled)return;N.parentNode==gt&&!this.options.group.revertClone?gt.insertBefore(St,N):Te?gt.insertBefore(St,Te):gt.appendChild(St),this.options.group.revertClone&&this.animate(N,St),W(St,"display",""),pe=!1}}};function As(a){a.dataTransfer&&(a.dataTransfer.dropEffect="move"),a.cancelable&&a.preventDefault()}function wn(a,t,n,o,r,s,e,i){var l,c=a[kt],f=c.options.onMove,u;return window.CustomEvent&&!ce&&!pn?l=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(l=document.createEvent("Event"),l.initEvent("move",!0,!0)),l.to=t,l.from=a,l.dragged=n,l.draggedRect=o,l.related=r||t,l.relatedRect=s||vt(t),l.willInsertAfter=i,l.originalEvent=e,a.dispatchEvent(l),f&&(u=f.call(c,l,e)),u}function qn(a){a.draggable=!1}function Ns(){ir=!1}function js(a,t,n){var o=vt(Le(n.el,0,n.options,!0)),r=10;return t?a.clientX<o.left-r||a.clientY<o.top&&a.clientX<o.right:a.clientY<o.top-r||a.clientY<o.bottom&&a.clientX<o.left}function Ms(a,t,n){var o=vt(pr(n.el,n.options.draggable)),r=10;return t?a.clientX>o.right+r||a.clientX<=o.right&&a.clientY>o.bottom&&a.clientX>=o.left:a.clientX>o.right&&a.clientY>o.top||a.clientX<=o.right&&a.clientY>o.bottom+r}function Ls(a,t,n,o,r,s,e,i){var l=o?a.clientY:a.clientX,c=o?n.height:n.width,f=o?n.top:n.left,u=o?n.bottom:n.right,d=!1;if(!e){if(i&&Dn<c*r){if(!on&&(rn===1?l>f+c*s/2:l<u-c*s/2)&&(on=!0),on)d=!0;else if(rn===1?l<f+Dn:l>u-Dn)return-rn}else if(l>f+c*(1-r)/2&&l<u-c*(1-r)/2)return ks(t)}return d=d||e,d&&(l<f+c*s/2||l>u-c*s/2)?l>f+c/2?1:-1:0}function ks(a){return xt(N)<xt(a)?1:-1}function Fs(a){for(var t=a.tagName+a.className+a.src+a.href+a.textContent,n=t.length,o=0;n--;)o+=t.charCodeAt(n);return o.toString(36)}function Us(a){Mn.length=0;for(var t=a.getElementsByTagName("input"),n=t.length;n--;){var o=t[n];o.checked&&Mn.push(o)}}function Pn(a){return setTimeout(a,0)}function sr(a){return clearTimeout(a)}Wn&&tt(document,"touchmove",function(a){(z.active||Ae)&&a.cancelable&&a.preventDefault()});z.utils={on:tt,off:_,css:W,find:uo,is:function(t,n){return!!_t(t,n,t,!1)},extend:ws,throttle:fo,closest:_t,toggleClass:yt,clone:vr,index:xt,nextTick:Pn,cancelNextTick:sr,detectDirection:po,getChild:Le};z.get=function(a){return a[kt]};z.mount=function(){for(var a=arguments.length,t=new Array(a),n=0;n<a;n++)t[n]=arguments[n];t[0].constructor===Array&&(t=t[0]),t.forEach(function(o){if(!o.prototype||!o.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(o));o.utils&&(z.utils=ie(ie({},z.utils),o.utils)),vn.mount(o)})};z.create=function(a,t){return new z(a,t)};z.version=ys;var It=[],Qe,lr,cr=!1,_n,tr,Ln,Ze;function Hs(){function a(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var t in this)t.charAt(0)==="_"&&typeof this[t]=="function"&&(this[t]=this[t].bind(this))}return a.prototype={dragStarted:function(n){var o=n.originalEvent;this.sortable.nativeDraggable?tt(document,"dragover",this._handleAutoScroll):this.options.supportPointer?tt(document,"pointermove",this._handleFallbackAutoScroll):o.touches?tt(document,"touchmove",this._handleFallbackAutoScroll):tt(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(n){var o=n.originalEvent;!this.options.dragOverBubble&&!o.rootEl&&this._handleAutoScroll(o)},drop:function(){this.sortable.nativeDraggable?_(document,"dragover",this._handleAutoScroll):(_(document,"pointermove",this._handleFallbackAutoScroll),_(document,"touchmove",this._handleFallbackAutoScroll),_(document,"mousemove",this._handleFallbackAutoScroll)),Nr(),$n(),xs()},nulling:function(){Ln=lr=Qe=cr=Ze=_n=tr=null,It.length=0},_handleFallbackAutoScroll:function(n){this._handleAutoScroll(n,!0)},_handleAutoScroll:function(n,o){var r=this,s=(n.touches?n.touches[0]:n).clientX,e=(n.touches?n.touches[0]:n).clientY,i=document.elementFromPoint(s,e);if(Ln=n,o||this.options.forceAutoScrollFallback||pn||ce||tn){er(n,this.options,i,o);var l=me(i,!0);cr&&(!Ze||s!==_n||e!==tr)&&(Ze&&Nr(),Ze=setInterval(function(){var c=me(document.elementFromPoint(s,e),!0);c!==l&&(l=c,$n()),er(n,r.options,c,o)},10),_n=s,tr=e)}else{if(!this.options.bubbleScroll||me(i,!0)===ae()){$n();return}er(n,this.options,me(i,!1),!1)}}},Jt(a,{pluginName:"scroll",initializeByDefault:!0})}function $n(){It.forEach(function(a){clearInterval(a.pid)}),It=[]}function Nr(){clearInterval(Ze)}var er=fo(function(a,t,n,o){if(!!t.scroll){var r=(a.touches?a.touches[0]:a).clientX,s=(a.touches?a.touches[0]:a).clientY,e=t.scrollSensitivity,i=t.scrollSpeed,l=ae(),c=!1,f;lr!==n&&(lr=n,$n(),Qe=t.scroll,f=t.scrollFn,Qe===!0&&(Qe=me(n,!0)));var u=0,d=Qe;do{var g=d,h=vt(g),p=h.top,v=h.bottom,m=h.left,y=h.right,O=h.width,w=h.height,x=void 0,I=void 0,L=g.scrollWidth,k=g.scrollHeight,P=W(g),M=g.scrollLeft,T=g.scrollTop;g===l?(x=O<L&&(P.overflowX==="auto"||P.overflowX==="scroll"||P.overflowX==="visible"),I=w<k&&(P.overflowY==="auto"||P.overflowY==="scroll"||P.overflowY==="visible")):(x=O<L&&(P.overflowX==="auto"||P.overflowX==="scroll"),I=w<k&&(P.overflowY==="auto"||P.overflowY==="scroll"));var $=x&&(Math.abs(y-r)<=e&&M+O<L)-(Math.abs(m-r)<=e&&!!M),E=I&&(Math.abs(v-s)<=e&&T+w<k)-(Math.abs(p-s)<=e&&!!T);if(!It[u])for(var A=0;A<=u;A++)It[A]||(It[A]={});(It[u].vx!=$||It[u].vy!=E||It[u].el!==g)&&(It[u].el=g,It[u].vx=$,It[u].vy=E,clearInterval(It[u].pid),($!=0||E!=0)&&(c=!0,It[u].pid=setInterval(function(){o&&this.layer===0&&z.active._onTouchMove(Ln);var V=It[this.layer].vy?It[this.layer].vy*i:0,j=It[this.layer].vx?It[this.layer].vx*i:0;typeof f=="function"&&f.call(z.dragged.parentNode[kt],j,V,a,Ln,It[this.layer].el)!=="continue"||ho(It[this.layer].el,j,V)}.bind({layer:u}),24))),u++}while(t.bubbleScroll&&d!==l&&(d=me(d,!1)));cr=c}},30),bo=function(t){var n=t.originalEvent,o=t.putSortable,r=t.dragEl,s=t.activeSortable,e=t.dispatchSortableEvent,i=t.hideGhostForTarget,l=t.unhideGhostForTarget;if(!!n){var c=o||s;i();var f=n.changedTouches&&n.changedTouches.length?n.changedTouches[0]:n,u=document.elementFromPoint(f.clientX,f.clientY);l(),c&&!c.el.contains(u)&&(e("spill"),this.onSpill({dragEl:r,putSortable:o}))}};function mr(){}mr.prototype={startIndex:null,dragStart:function(t){var n=t.oldDraggableIndex;this.startIndex=n},onSpill:function(t){var n=t.dragEl,o=t.putSortable;this.sortable.captureAnimationState(),o&&o.captureAnimationState();var r=Le(this.sortable.el,this.startIndex,this.options);r?this.sortable.el.insertBefore(n,r):this.sortable.el.appendChild(n),this.sortable.animateAll(),o&&o.animateAll()},drop:bo};Jt(mr,{pluginName:"revertOnSpill"});function yr(){}yr.prototype={onSpill:function(t){var n=t.dragEl,o=t.putSortable,r=o||this.sortable;r.captureAnimationState(),n.parentNode&&n.parentNode.removeChild(n),r.animateAll()},drop:bo};Jt(yr,{pluginName:"removeOnSpill"});var Yt;function Ws(){function a(){this.defaults={swapClass:"sortable-swap-highlight"}}return a.prototype={dragStart:function(n){var o=n.dragEl;Yt=o},dragOverValid:function(n){var o=n.completed,r=n.target,s=n.onMove,e=n.activeSortable,i=n.changed,l=n.cancel;if(!!e.options.swap){var c=this.sortable.el,f=this.options;if(r&&r!==c){var u=Yt;s(r)!==!1?(yt(r,f.swapClass,!0),Yt=r):Yt=null,u&&u!==Yt&&yt(u,f.swapClass,!1)}i(),o(!0),l()}},drop:function(n){var o=n.activeSortable,r=n.putSortable,s=n.dragEl,e=r||this.sortable,i=this.options;Yt&&yt(Yt,i.swapClass,!1),Yt&&(i.swap||r&&r.options.swap)&&s!==Yt&&(e.captureAnimationState(),e!==o&&o.captureAnimationState(),Vs(s,Yt),e.animateAll(),e!==o&&o.animateAll())},nulling:function(){Yt=null}},Jt(a,{pluginName:"swap",eventProperties:function(){return{swapItem:Yt}}})}function Vs(a,t){var n=a.parentNode,o=t.parentNode,r,s;!n||!o||n.isEqualNode(t)||o.isEqualNode(a)||(r=xt(a),s=xt(t),n.isEqualNode(o)&&r<s&&s++,n.insertBefore(t,n.children[r]),o.insertBefore(a,o.children[s]))}var J=[],Kt=[],Ke,qt,ze=!1,Vt=!1,$e=!1,ut,Xe,xn;function Bs(){function a(t){for(var n in this)n.charAt(0)==="_"&&typeof this[n]=="function"&&(this[n]=this[n].bind(this));t.options.supportPointer?tt(document,"pointerup",this._deselectMultiDrag):(tt(document,"mouseup",this._deselectMultiDrag),tt(document,"touchend",this._deselectMultiDrag)),tt(document,"keydown",this._checkKeyDown),tt(document,"keyup",this._checkKeyUp),this.defaults={selectedClass:"sortable-selected",multiDragKey:null,setData:function(r,s){var e="";J.length&&qt===t?J.forEach(function(i,l){e+=(l?", ":"")+i.textContent}):e=s.textContent,r.setData("Text",e)}}}return a.prototype={multiDragKeyDown:!1,isMultiDrag:!1,delayStartGlobal:function(n){var o=n.dragEl;ut=o},delayEnded:function(){this.isMultiDrag=~J.indexOf(ut)},setupClone:function(n){var o=n.sortable,r=n.cancel;if(!!this.isMultiDrag){for(var s=0;s<J.length;s++)Kt.push(vr(J[s])),Kt[s].sortableIndex=J[s].sortableIndex,Kt[s].draggable=!1,Kt[s].style["will-change"]="",yt(Kt[s],this.options.selectedClass,!1),J[s]===ut&&yt(Kt[s],this.options.chosenClass,!1);o._hideClone(),r()}},clone:function(n){var o=n.sortable,r=n.rootEl,s=n.dispatchSortableEvent,e=n.cancel;!this.isMultiDrag||this.options.removeCloneOnHide||J.length&&qt===o&&(jr(!0,r),s("clone"),e())},showClone:function(n){var o=n.cloneNowShown,r=n.rootEl,s=n.cancel;!this.isMultiDrag||(jr(!1,r),Kt.forEach(function(e){W(e,"display","")}),o(),xn=!1,s())},hideClone:function(n){var o=this;n.sortable;var r=n.cloneNowHidden,s=n.cancel;!this.isMultiDrag||(Kt.forEach(function(e){W(e,"display","none"),o.options.removeCloneOnHide&&e.parentNode&&e.parentNode.removeChild(e)}),r(),xn=!0,s())},dragStartGlobal:function(n){n.sortable,!this.isMultiDrag&&qt&&qt.multiDrag._deselectMultiDrag(),J.forEach(function(o){o.sortableIndex=xt(o)}),J=J.sort(function(o,r){return o.sortableIndex-r.sortableIndex}),$e=!0},dragStarted:function(n){var o=this,r=n.sortable;if(!!this.isMultiDrag){if(this.options.sort&&(r.captureAnimationState(),this.options.animation)){J.forEach(function(e){e!==ut&&W(e,"position","absolute")});var s=vt(ut,!1,!0,!0);J.forEach(function(e){e!==ut&&Pr(e,s)}),Vt=!0,ze=!0}r.animateAll(function(){Vt=!1,ze=!1,o.options.animation&&J.forEach(function(e){Xn(e)}),o.options.sort&&Tn()})}},dragOver:function(n){var o=n.target,r=n.completed,s=n.cancel;Vt&&~J.indexOf(o)&&(r(!1),s())},revert:function(n){var o=n.fromSortable,r=n.rootEl,s=n.sortable,e=n.dragRect;J.length>1&&(J.forEach(function(i){s.addAnimationState({target:i,rect:Vt?vt(i):e}),Xn(i),i.fromRect=e,o.removeAnimationState(i)}),Vt=!1,Gs(!this.options.removeCloneOnHide,r))},dragOverCompleted:function(n){var o=n.sortable,r=n.isOwner,s=n.insertion,e=n.activeSortable,i=n.parentEl,l=n.putSortable,c=this.options;if(s){if(r&&e._hideClone(),ze=!1,c.animation&&J.length>1&&(Vt||!r&&!e.options.sort&&!l)){var f=vt(ut,!1,!0,!0);J.forEach(function(d){d!==ut&&(Pr(d,f),i.appendChild(d))}),Vt=!0}if(!r)if(Vt||Tn(),J.length>1){var u=xn;e._showClone(o),e.options.animation&&!xn&&u&&Kt.forEach(function(d){e.addAnimationState({target:d,rect:Xe}),d.fromRect=Xe,d.thisAnimationDuration=null})}else e._showClone(o)}},dragOverAnimationCapture:function(n){var o=n.dragRect,r=n.isOwner,s=n.activeSortable;if(J.forEach(function(i){i.thisAnimationDuration=null}),s.options.animation&&!r&&s.multiDrag.isMultiDrag){Xe=Jt({},o);var e=Ce(ut,!0);Xe.top-=e.f,Xe.left-=e.e}},dragOverAnimationComplete:function(){Vt&&(Vt=!1,Tn())},drop:function(n){var o=n.originalEvent,r=n.rootEl,s=n.parentEl,e=n.sortable,i=n.dispatchSortableEvent,l=n.oldIndex,c=n.putSortable,f=c||this.sortable;if(!!o){var u=this.options,d=s.children;if(!$e)if(u.multiDragKey&&!this.multiDragKeyDown&&this._deselectMultiDrag(),yt(ut,u.selectedClass,!~J.indexOf(ut)),~J.indexOf(ut))J.splice(J.indexOf(ut),1),Ke=null,Ye({sortable:e,rootEl:r,name:"deselect",targetEl:ut,originalEvt:o});else{if(J.push(ut),Ye({sortable:e,rootEl:r,name:"select",targetEl:ut,originalEvt:o}),o.shiftKey&&Ke&&e.el.contains(Ke)){var g=xt(Ke),h=xt(ut);if(~g&&~h&&g!==h){var p,v;for(h>g?(v=g,p=h):(v=h,p=g+1);v<p;v++)~J.indexOf(d[v])||(yt(d[v],u.selectedClass,!0),J.push(d[v]),Ye({sortable:e,rootEl:r,name:"select",targetEl:d[v],originalEvt:o}))}}else Ke=ut;qt=f}if($e&&this.isMultiDrag){if(Vt=!1,(s[kt].options.sort||s!==r)&&J.length>1){var m=vt(ut),y=xt(ut,":not(."+this.options.selectedClass+")");if(!ze&&u.animation&&(ut.thisAnimationDuration=null),f.captureAnimationState(),!ze&&(u.animation&&(ut.fromRect=m,J.forEach(function(w){if(w.thisAnimationDuration=null,w!==ut){var x=Vt?vt(w):m;w.fromRect=x,f.addAnimationState({target:w,rect:x})}})),Tn(),J.forEach(function(w){d[y]?s.insertBefore(w,d[y]):s.appendChild(w),y++}),l===xt(ut))){var O=!1;J.forEach(function(w){if(w.sortableIndex!==xt(w)){O=!0;return}}),O&&i("update")}J.forEach(function(w){Xn(w)}),f.animateAll()}qt=f}(r===s||c&&c.lastPutMode!=="clone")&&Kt.forEach(function(w){w.parentNode&&w.parentNode.removeChild(w)})}},nullingGlobal:function(){this.isMultiDrag=$e=!1,Kt.length=0},destroyGlobal:function(){this._deselectMultiDrag(),_(document,"pointerup",this._deselectMultiDrag),_(document,"mouseup",this._deselectMultiDrag),_(document,"touchend",this._deselectMultiDrag),_(document,"keydown",this._checkKeyDown),_(document,"keyup",this._checkKeyUp)},_deselectMultiDrag:function(n){if(!(typeof $e<"u"&&$e)&&qt===this.sortable&&!(n&&_t(n.target,this.options.draggable,this.sortable.el,!1))&&!(n&&n.button!==0))for(;J.length;){var o=J[0];yt(o,this.options.selectedClass,!1),J.shift(),Ye({sortable:this.sortable,rootEl:this.sortable.el,name:"deselect",targetEl:o,originalEvt:n})}},_checkKeyDown:function(n){n.key===this.options.multiDragKey&&(this.multiDragKeyDown=!0)},_checkKeyUp:function(n){n.key===this.options.multiDragKey&&(this.multiDragKeyDown=!1)}},Jt(a,{pluginName:"multiDrag",utils:{select:function(n){var o=n.parentNode[kt];!o||!o.options.multiDrag||~J.indexOf(n)||(qt&&qt!==o&&(qt.multiDrag._deselectMultiDrag(),qt=o),yt(n,o.options.selectedClass,!0),J.push(n))},deselect:function(n){var o=n.parentNode[kt],r=J.indexOf(n);!o||!o.options.multiDrag||!~r||(yt(n,o.options.selectedClass,!1),J.splice(r,1))}},eventProperties:function(){var n=this,o=[],r=[];return J.forEach(function(s){o.push({multiDragElement:s,index:s.sortableIndex});var e;Vt&&s!==ut?e=-1:Vt?e=xt(s,":not(."+n.options.selectedClass+")"):e=xt(s),r.push({multiDragElement:s,index:e})}),{items:hs(J),clones:[].concat(Kt),oldIndicies:o,newIndicies:r}},optionListeners:{multiDragKey:function(n){return n=n.toLowerCase(),n==="ctrl"?n="Control":n.length>1&&(n=n.charAt(0).toUpperCase()+n.substr(1)),n}}})}function Gs(a,t){J.forEach(function(n,o){var r=t.children[n.sortableIndex+(a?Number(o):0)];r?t.insertBefore(n,r):t.appendChild(n)})}function jr(a,t){Kt.forEach(function(n,o){var r=t.children[n.sortableIndex+(a?Number(o):0)];r?t.insertBefore(n,r):t.appendChild(n)})}function Tn(){J.forEach(function(a){a!==ut&&a.parentNode&&a.parentNode.removeChild(a)})}z.mount(new Hs);z.mount(yr,mr);const Ks=Object.freeze(Object.defineProperty({__proto__:null,default:z,MultiDrag:Bs,Sortable:z,Swap:Ws},Symbol.toStringTag,{value:"Module"})),zs=io(Ks);(function(a,t){(function(o,r){a.exports=r(cs,zs)})(typeof self<"u"?self:ss,function(n,o){return function(r){var s={};function e(i){if(s[i])return s[i].exports;var l=s[i]={i,l:!1,exports:{}};return r[i].call(l.exports,l,l.exports,e),l.l=!0,l.exports}return e.m=r,e.c=s,e.d=function(i,l,c){e.o(i,l)||Object.defineProperty(i,l,{enumerable:!0,get:c})},e.r=function(i){typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(i,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(i,"__esModule",{value:!0})},e.t=function(i,l){if(l&1&&(i=e(i)),l&8||l&4&&typeof i=="object"&&i&&i.__esModule)return i;var c=Object.create(null);if(e.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:i}),l&2&&typeof i!="string")for(var f in i)e.d(c,f,function(u){return i[u]}.bind(null,f));return c},e.n=function(i){var l=i&&i.__esModule?function(){return i.default}:function(){return i};return e.d(l,"a",l),l},e.o=function(i,l){return Object.prototype.hasOwnProperty.call(i,l)},e.p="",e(e.s="fb15")}({"00ee":function(r,s,e){var i=e("b622"),l=i("toStringTag"),c={};c[l]="z",r.exports=String(c)==="[object z]"},"0366":function(r,s,e){var i=e("1c0b");r.exports=function(l,c,f){if(i(l),c===void 0)return l;switch(f){case 0:return function(){return l.call(c)};case 1:return function(u){return l.call(c,u)};case 2:return function(u,d){return l.call(c,u,d)};case 3:return function(u,d,g){return l.call(c,u,d,g)}}return function(){return l.apply(c,arguments)}}},"057f":function(r,s,e){var i=e("fc6a"),l=e("241c").f,c={}.toString,f=typeof window=="object"&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],u=function(d){try{return l(d)}catch{return f.slice()}};r.exports.f=function(g){return f&&c.call(g)=="[object Window]"?u(g):l(i(g))}},"06cf":function(r,s,e){var i=e("83ab"),l=e("d1e7"),c=e("5c6c"),f=e("fc6a"),u=e("c04e"),d=e("5135"),g=e("0cfb"),h=Object.getOwnPropertyDescriptor;s.f=i?h:function(v,m){if(v=f(v),m=u(m,!0),g)try{return h(v,m)}catch{}if(d(v,m))return c(!l.f.call(v,m),v[m])}},"0cfb":function(r,s,e){var i=e("83ab"),l=e("d039"),c=e("cc12");r.exports=!i&&!l(function(){return Object.defineProperty(c("div"),"a",{get:function(){return 7}}).a!=7})},"13d5":function(r,s,e){var i=e("23e7"),l=e("d58f").left,c=e("a640"),f=e("ae40"),u=c("reduce"),d=f("reduce",{1:0});i({target:"Array",proto:!0,forced:!u||!d},{reduce:function(h){return l(this,h,arguments.length,arguments.length>1?arguments[1]:void 0)}})},"14c3":function(r,s,e){var i=e("c6b6"),l=e("9263");r.exports=function(c,f){var u=c.exec;if(typeof u=="function"){var d=u.call(c,f);if(typeof d!="object")throw TypeError("RegExp exec method returned something other than an Object or null");return d}if(i(c)!=="RegExp")throw TypeError("RegExp#exec called on incompatible receiver");return l.call(c,f)}},"159b":function(r,s,e){var i=e("da84"),l=e("fdbc"),c=e("17c2"),f=e("9112");for(var u in l){var d=i[u],g=d&&d.prototype;if(g&&g.forEach!==c)try{f(g,"forEach",c)}catch{g.forEach=c}}},"17c2":function(r,s,e){var i=e("b727").forEach,l=e("a640"),c=e("ae40"),f=l("forEach"),u=c("forEach");r.exports=!f||!u?function(g){return i(this,g,arguments.length>1?arguments[1]:void 0)}:[].forEach},"1be4":function(r,s,e){var i=e("d066");r.exports=i("document","documentElement")},"1c0b":function(r,s){r.exports=function(e){if(typeof e!="function")throw TypeError(String(e)+" is not a function");return e}},"1c7e":function(r,s,e){var i=e("b622"),l=i("iterator"),c=!1;try{var f=0,u={next:function(){return{done:!!f++}},return:function(){c=!0}};u[l]=function(){return this},Array.from(u,function(){throw 2})}catch{}r.exports=function(d,g){if(!g&&!c)return!1;var h=!1;try{var p={};p[l]=function(){return{next:function(){return{done:h=!0}}}},d(p)}catch{}return h}},"1d80":function(r,s){r.exports=function(e){if(e==null)throw TypeError("Can't call method on "+e);return e}},"1dde":function(r,s,e){var i=e("d039"),l=e("b622"),c=e("2d00"),f=l("species");r.exports=function(u){return c>=51||!i(function(){var d=[],g=d.constructor={};return g[f]=function(){return{foo:1}},d[u](Boolean).foo!==1})}},"23cb":function(r,s,e){var i=e("a691"),l=Math.max,c=Math.min;r.exports=function(f,u){var d=i(f);return d<0?l(d+u,0):c(d,u)}},"23e7":function(r,s,e){var i=e("da84"),l=e("06cf").f,c=e("9112"),f=e("6eeb"),u=e("ce4e"),d=e("e893"),g=e("94ca");r.exports=function(h,p){var v=h.target,m=h.global,y=h.stat,O,w,x,I,L,k;if(m?w=i:y?w=i[v]||u(v,{}):w=(i[v]||{}).prototype,w)for(x in p){if(L=p[x],h.noTargetGet?(k=l(w,x),I=k&&k.value):I=w[x],O=g(m?x:v+(y?".":"#")+x,h.forced),!O&&I!==void 0){if(typeof L==typeof I)continue;d(L,I)}(h.sham||I&&I.sham)&&c(L,"sham",!0),f(w,x,L,h)}}},"241c":function(r,s,e){var i=e("ca84"),l=e("7839"),c=l.concat("length","prototype");s.f=Object.getOwnPropertyNames||function(u){return i(u,c)}},"25f0":function(r,s,e){var i=e("6eeb"),l=e("825a"),c=e("d039"),f=e("ad6d"),u="toString",d=RegExp.prototype,g=d[u],h=c(function(){return g.call({source:"a",flags:"b"})!="/a/b"}),p=g.name!=u;(h||p)&&i(RegExp.prototype,u,function(){var m=l(this),y=String(m.source),O=m.flags,w=String(O===void 0&&m instanceof RegExp&&!("flags"in d)?f.call(m):O);return"/"+y+"/"+w},{unsafe:!0})},"2ca0":function(r,s,e){var i=e("23e7"),l=e("06cf").f,c=e("50c4"),f=e("5a34"),u=e("1d80"),d=e("ab13"),g=e("c430"),h="".startsWith,p=Math.min,v=d("startsWith"),m=!g&&!v&&!!function(){var y=l(String.prototype,"startsWith");return y&&!y.writable}();i({target:"String",proto:!0,forced:!m&&!v},{startsWith:function(O){var w=String(u(this));f(O);var x=c(p(arguments.length>1?arguments[1]:void 0,w.length)),I=String(O);return h?h.call(w,I,x):w.slice(x,x+I.length)===I}})},"2d00":function(r,s,e){var i=e("da84"),l=e("342f"),c=i.process,f=c&&c.versions,u=f&&f.v8,d,g;u?(d=u.split("."),g=d[0]+d[1]):l&&(d=l.match(/Edge\/(\d+)/),(!d||d[1]>=74)&&(d=l.match(/Chrome\/(\d+)/),d&&(g=d[1]))),r.exports=g&&+g},"342f":function(r,s,e){var i=e("d066");r.exports=i("navigator","userAgent")||""},"35a1":function(r,s,e){var i=e("f5df"),l=e("3f8c"),c=e("b622"),f=c("iterator");r.exports=function(u){if(u!=null)return u[f]||u["@@iterator"]||l[i(u)]}},"37e8":function(r,s,e){var i=e("83ab"),l=e("9bf2"),c=e("825a"),f=e("df75");r.exports=i?Object.defineProperties:function(d,g){c(d);for(var h=f(g),p=h.length,v=0,m;p>v;)l.f(d,m=h[v++],g[m]);return d}},"3bbe":function(r,s,e){var i=e("861d");r.exports=function(l){if(!i(l)&&l!==null)throw TypeError("Can't set "+String(l)+" as a prototype");return l}},"3ca3":function(r,s,e){var i=e("6547").charAt,l=e("69f3"),c=e("7dd0"),f="String Iterator",u=l.set,d=l.getterFor(f);c(String,"String",function(g){u(this,{type:f,string:String(g),index:0})},function(){var h=d(this),p=h.string,v=h.index,m;return v>=p.length?{value:void 0,done:!0}:(m=i(p,v),h.index+=m.length,{value:m,done:!1})})},"3f8c":function(r,s){r.exports={}},4160:function(r,s,e){var i=e("23e7"),l=e("17c2");i({target:"Array",proto:!0,forced:[].forEach!=l},{forEach:l})},"428f":function(r,s,e){var i=e("da84");r.exports=i},"44ad":function(r,s,e){var i=e("d039"),l=e("c6b6"),c="".split;r.exports=i(function(){return!Object("z").propertyIsEnumerable(0)})?function(f){return l(f)=="String"?c.call(f,""):Object(f)}:Object},"44d2":function(r,s,e){var i=e("b622"),l=e("7c73"),c=e("9bf2"),f=i("unscopables"),u=Array.prototype;u[f]==null&&c.f(u,f,{configurable:!0,value:l(null)}),r.exports=function(d){u[f][d]=!0}},"44e7":function(r,s,e){var i=e("861d"),l=e("c6b6"),c=e("b622"),f=c("match");r.exports=function(u){var d;return i(u)&&((d=u[f])!==void 0?!!d:l(u)=="RegExp")}},4930:function(r,s,e){var i=e("d039");r.exports=!!Object.getOwnPropertySymbols&&!i(function(){return!String(Symbol())})},"4d64":function(r,s,e){var i=e("fc6a"),l=e("50c4"),c=e("23cb"),f=function(u){return function(d,g,h){var p=i(d),v=l(p.length),m=c(h,v),y;if(u&&g!=g){for(;v>m;)if(y=p[m++],y!=y)return!0}else for(;v>m;m++)if((u||m in p)&&p[m]===g)return u||m||0;return!u&&-1}};r.exports={includes:f(!0),indexOf:f(!1)}},"4de4":function(r,s,e){var i=e("23e7"),l=e("b727").filter,c=e("1dde"),f=e("ae40"),u=c("filter"),d=f("filter");i({target:"Array",proto:!0,forced:!u||!d},{filter:function(h){return l(this,h,arguments.length>1?arguments[1]:void 0)}})},"4df4":function(r,s,e){var i=e("0366"),l=e("7b0b"),c=e("9bdd"),f=e("e95a"),u=e("50c4"),d=e("8418"),g=e("35a1");r.exports=function(p){var v=l(p),m=typeof this=="function"?this:Array,y=arguments.length,O=y>1?arguments[1]:void 0,w=O!==void 0,x=g(v),I=0,L,k,P,M,T,$;if(w&&(O=i(O,y>2?arguments[2]:void 0,2)),x!=null&&!(m==Array&&f(x)))for(M=x.call(v),T=M.next,k=new m;!(P=T.call(M)).done;I++)$=w?c(M,O,[P.value,I],!0):P.value,d(k,I,$);else for(L=u(v.length),k=new m(L);L>I;I++)$=w?O(v[I],I):v[I],d(k,I,$);return k.length=I,k}},"4fad":function(r,s,e){var i=e("23e7"),l=e("6f53").entries;i({target:"Object",stat:!0},{entries:function(f){return l(f)}})},"50c4":function(r,s,e){var i=e("a691"),l=Math.min;r.exports=function(c){return c>0?l(i(c),9007199254740991):0}},5135:function(r,s){var e={}.hasOwnProperty;r.exports=function(i,l){return e.call(i,l)}},5319:function(r,s,e){var i=e("d784"),l=e("825a"),c=e("7b0b"),f=e("50c4"),u=e("a691"),d=e("1d80"),g=e("8aa5"),h=e("14c3"),p=Math.max,v=Math.min,m=Math.floor,y=/\$([$&'`]|\d\d?|<[^>]*>)/g,O=/\$([$&'`]|\d\d?)/g,w=function(x){return x===void 0?x:String(x)};i("replace",2,function(x,I,L,k){var P=k.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,M=k.REPLACE_KEEPS_$0,T=P?"$":"$0";return[function(A,V){var j=d(this),U=A==null?void 0:A[x];return U!==void 0?U.call(A,j,V):I.call(String(j),A,V)},function(E,A){if(!P&&M||typeof A=="string"&&A.indexOf(T)===-1){var V=L(I,E,this,A);if(V.done)return V.value}var j=l(E),U=String(this),nt=typeof A=="function";nt||(A=String(A));var ct=j.global;if(ct){var q=j.unicode;j.lastIndex=0}for(var it=[];;){var ot=h(j,U);if(ot===null||(it.push(ot),!ct))break;var Ot=String(ot[0]);Ot===""&&(j.lastIndex=g(U,f(j.lastIndex),q))}for(var Dt="",Ct=0,ht=0;ht<it.length;ht++){ot=it[ht];for(var mt=String(ot[0]),Gt=p(v(u(ot.index),U.length),0),Ft=[],se=1;se<ot.length;se++)Ft.push(w(ot[se]));var Se=ot.groups;if(nt){var ue=[mt].concat(Ft,Gt,U);Se!==void 0&&ue.push(Se);var Rt=String(A.apply(void 0,ue))}else Rt=$(mt,U,Gt,Ft,Se,A);Gt>=Ct&&(Dt+=U.slice(Ct,Gt)+Rt,Ct=Gt+mt.length)}return Dt+U.slice(Ct)}];function $(E,A,V,j,U,nt){var ct=V+E.length,q=j.length,it=O;return U!==void 0&&(U=c(U),it=y),I.call(nt,it,function(ot,Ot){var Dt;switch(Ot.charAt(0)){case"$":return"$";case"&":return E;case"`":return A.slice(0,V);case"'":return A.slice(ct);case"<":Dt=U[Ot.slice(1,-1)];break;default:var Ct=+Ot;if(Ct===0)return ot;if(Ct>q){var ht=m(Ct/10);return ht===0?ot:ht<=q?j[ht-1]===void 0?Ot.charAt(1):j[ht-1]+Ot.charAt(1):ot}Dt=j[Ct-1]}return Dt===void 0?"":Dt})}})},5692:function(r,s,e){var i=e("c430"),l=e("c6cd");(r.exports=function(c,f){return l[c]||(l[c]=f!==void 0?f:{})})("versions",[]).push({version:"3.6.5",mode:i?"pure":"global",copyright:"\xA9 2020 Denis Pushkarev (zloirock.ru)"})},"56ef":function(r,s,e){var i=e("d066"),l=e("241c"),c=e("7418"),f=e("825a");r.exports=i("Reflect","ownKeys")||function(d){var g=l.f(f(d)),h=c.f;return h?g.concat(h(d)):g}},"5a34":function(r,s,e){var i=e("44e7");r.exports=function(l){if(i(l))throw TypeError("The method doesn't accept regular expressions");return l}},"5c6c":function(r,s){r.exports=function(e,i){return{enumerable:!(e&1),configurable:!(e&2),writable:!(e&4),value:i}}},"5db7":function(r,s,e){var i=e("23e7"),l=e("a2bf"),c=e("7b0b"),f=e("50c4"),u=e("1c0b"),d=e("65f0");i({target:"Array",proto:!0},{flatMap:function(h){var p=c(this),v=f(p.length),m;return u(h),m=d(p,0),m.length=l(m,p,p,v,0,1,h,arguments.length>1?arguments[1]:void 0),m}})},6547:function(r,s,e){var i=e("a691"),l=e("1d80"),c=function(f){return function(u,d){var g=String(l(u)),h=i(d),p=g.length,v,m;return h<0||h>=p?f?"":void 0:(v=g.charCodeAt(h),v<55296||v>56319||h+1===p||(m=g.charCodeAt(h+1))<56320||m>57343?f?g.charAt(h):v:f?g.slice(h,h+2):(v-55296<<10)+(m-56320)+65536)}};r.exports={codeAt:c(!1),charAt:c(!0)}},"65f0":function(r,s,e){var i=e("861d"),l=e("e8b5"),c=e("b622"),f=c("species");r.exports=function(u,d){var g;return l(u)&&(g=u.constructor,typeof g=="function"&&(g===Array||l(g.prototype))?g=void 0:i(g)&&(g=g[f],g===null&&(g=void 0))),new(g===void 0?Array:g)(d===0?0:d)}},"69f3":function(r,s,e){var i=e("7f9a"),l=e("da84"),c=e("861d"),f=e("9112"),u=e("5135"),d=e("f772"),g=e("d012"),h=l.WeakMap,p,v,m,y=function(P){return m(P)?v(P):p(P,{})},O=function(P){return function(M){var T;if(!c(M)||(T=v(M)).type!==P)throw TypeError("Incompatible receiver, "+P+" required");return T}};if(i){var w=new h,x=w.get,I=w.has,L=w.set;p=function(P,M){return L.call(w,P,M),M},v=function(P){return x.call(w,P)||{}},m=function(P){return I.call(w,P)}}else{var k=d("state");g[k]=!0,p=function(P,M){return f(P,k,M),M},v=function(P){return u(P,k)?P[k]:{}},m=function(P){return u(P,k)}}r.exports={set:p,get:v,has:m,enforce:y,getterFor:O}},"6eeb":function(r,s,e){var i=e("da84"),l=e("9112"),c=e("5135"),f=e("ce4e"),u=e("8925"),d=e("69f3"),g=d.get,h=d.enforce,p=String(String).split("String");(r.exports=function(v,m,y,O){var w=O?!!O.unsafe:!1,x=O?!!O.enumerable:!1,I=O?!!O.noTargetGet:!1;if(typeof y=="function"&&(typeof m=="string"&&!c(y,"name")&&l(y,"name",m),h(y).source=p.join(typeof m=="string"?m:"")),v===i){x?v[m]=y:f(m,y);return}else w?!I&&v[m]&&(x=!0):delete v[m];x?v[m]=y:l(v,m,y)})(Function.prototype,"toString",function(){return typeof this=="function"&&g(this).source||u(this)})},"6f53":function(r,s,e){var i=e("83ab"),l=e("df75"),c=e("fc6a"),f=e("d1e7").f,u=function(d){return function(g){for(var h=c(g),p=l(h),v=p.length,m=0,y=[],O;v>m;)O=p[m++],(!i||f.call(h,O))&&y.push(d?[O,h[O]]:h[O]);return y}};r.exports={entries:u(!0),values:u(!1)}},"73d9":function(r,s,e){var i=e("44d2");i("flatMap")},7418:function(r,s){s.f=Object.getOwnPropertySymbols},"746f":function(r,s,e){var i=e("428f"),l=e("5135"),c=e("e538"),f=e("9bf2").f;r.exports=function(u){var d=i.Symbol||(i.Symbol={});l(d,u)||f(d,u,{value:c.f(u)})}},7839:function(r,s){r.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},"7b0b":function(r,s,e){var i=e("1d80");r.exports=function(l){return Object(i(l))}},"7c73":function(r,s,e){var i=e("825a"),l=e("37e8"),c=e("7839"),f=e("d012"),u=e("1be4"),d=e("cc12"),g=e("f772"),h=">",p="<",v="prototype",m="script",y=g("IE_PROTO"),O=function(){},w=function(P){return p+m+h+P+p+"/"+m+h},x=function(P){P.write(w("")),P.close();var M=P.parentWindow.Object;return P=null,M},I=function(){var P=d("iframe"),M="java"+m+":",T;return P.style.display="none",u.appendChild(P),P.src=String(M),T=P.contentWindow.document,T.open(),T.write(w("document.F=Object")),T.close(),T.F},L,k=function(){try{L=document.domain&&new ActiveXObject("htmlfile")}catch{}k=L?x(L):I();for(var P=c.length;P--;)delete k[v][c[P]];return k()};f[y]=!0,r.exports=Object.create||function(M,T){var $;return M!==null?(O[v]=i(M),$=new O,O[v]=null,$[y]=M):$=k(),T===void 0?$:l($,T)}},"7dd0":function(r,s,e){var i=e("23e7"),l=e("9ed3"),c=e("e163"),f=e("d2bb"),u=e("d44e"),d=e("9112"),g=e("6eeb"),h=e("b622"),p=e("c430"),v=e("3f8c"),m=e("ae93"),y=m.IteratorPrototype,O=m.BUGGY_SAFARI_ITERATORS,w=h("iterator"),x="keys",I="values",L="entries",k=function(){return this};r.exports=function(P,M,T,$,E,A,V){l(T,M,$);var j=function(ht){if(ht===E&&it)return it;if(!O&&ht in ct)return ct[ht];switch(ht){case x:return function(){return new T(this,ht)};case I:return function(){return new T(this,ht)};case L:return function(){return new T(this,ht)}}return function(){return new T(this)}},U=M+" Iterator",nt=!1,ct=P.prototype,q=ct[w]||ct["@@iterator"]||E&&ct[E],it=!O&&q||j(E),ot=M=="Array"&&ct.entries||q,Ot,Dt,Ct;if(ot&&(Ot=c(ot.call(new P)),y!==Object.prototype&&Ot.next&&(!p&&c(Ot)!==y&&(f?f(Ot,y):typeof Ot[w]!="function"&&d(Ot,w,k)),u(Ot,U,!0,!0),p&&(v[U]=k))),E==I&&q&&q.name!==I&&(nt=!0,it=function(){return q.call(this)}),(!p||V)&&ct[w]!==it&&d(ct,w,it),v[M]=it,E)if(Dt={values:j(I),keys:A?it:j(x),entries:j(L)},V)for(Ct in Dt)(O||nt||!(Ct in ct))&&g(ct,Ct,Dt[Ct]);else i({target:M,proto:!0,forced:O||nt},Dt);return Dt}},"7f9a":function(r,s,e){var i=e("da84"),l=e("8925"),c=i.WeakMap;r.exports=typeof c=="function"&&/native code/.test(l(c))},"825a":function(r,s,e){var i=e("861d");r.exports=function(l){if(!i(l))throw TypeError(String(l)+" is not an object");return l}},"83ab":function(r,s,e){var i=e("d039");r.exports=!i(function(){return Object.defineProperty({},1,{get:function(){return 7}})[1]!=7})},8418:function(r,s,e){var i=e("c04e"),l=e("9bf2"),c=e("5c6c");r.exports=function(f,u,d){var g=i(u);g in f?l.f(f,g,c(0,d)):f[g]=d}},"861d":function(r,s){r.exports=function(e){return typeof e=="object"?e!==null:typeof e=="function"}},8875:function(r,s,e){var i,l,c;(function(f,u){l=[],i=u,c=typeof i=="function"?i.apply(s,l):i,c!==void 0&&(r.exports=c)})(typeof self<"u"?self:this,function(){function f(){var u=Object.getOwnPropertyDescriptor(document,"currentScript");if(!u&&"currentScript"in document&&document.currentScript||u&&u.get!==f&&document.currentScript)return document.currentScript;try{throw new Error}catch(L){var d=/.*at [^(]*\((.*):(.+):(.+)\)$/ig,g=/@([^@]*):(\d+):(\d+)\s*$/ig,h=d.exec(L.stack)||g.exec(L.stack),p=h&&h[1]||!1,v=h&&h[2]||!1,m=document.location.href.replace(document.location.hash,""),y,O,w,x=document.getElementsByTagName("script");p===m&&(y=document.documentElement.outerHTML,O=new RegExp("(?:[^\\n]+?\\n){0,"+(v-2)+"}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*","i"),w=y.replace(O,"$1").trim());for(var I=0;I<x.length;I++)if(x[I].readyState==="interactive"||x[I].src===p||p===m&&x[I].innerHTML&&x[I].innerHTML.trim()===w)return x[I];return null}}return f})},8925:function(r,s,e){var i=e("c6cd"),l=Function.toString;typeof i.inspectSource!="function"&&(i.inspectSource=function(c){return l.call(c)}),r.exports=i.inspectSource},"8aa5":function(r,s,e){var i=e("6547").charAt;r.exports=function(l,c,f){return c+(f?i(l,c).length:1)}},"8bbf":function(r,s){r.exports=n},"90e3":function(r,s){var e=0,i=Math.random();r.exports=function(l){return"Symbol("+String(l===void 0?"":l)+")_"+(++e+i).toString(36)}},9112:function(r,s,e){var i=e("83ab"),l=e("9bf2"),c=e("5c6c");r.exports=i?function(f,u,d){return l.f(f,u,c(1,d))}:function(f,u,d){return f[u]=d,f}},9263:function(r,s,e){var i=e("ad6d"),l=e("9f7f"),c=RegExp.prototype.exec,f=String.prototype.replace,u=c,d=function(){var v=/a/,m=/b*/g;return c.call(v,"a"),c.call(m,"a"),v.lastIndex!==0||m.lastIndex!==0}(),g=l.UNSUPPORTED_Y||l.BROKEN_CARET,h=/()??/.exec("")[1]!==void 0,p=d||h||g;p&&(u=function(m){var y=this,O,w,x,I,L=g&&y.sticky,k=i.call(y),P=y.source,M=0,T=m;return L&&(k=k.replace("y",""),k.indexOf("g")===-1&&(k+="g"),T=String(m).slice(y.lastIndex),y.lastIndex>0&&(!y.multiline||y.multiline&&m[y.lastIndex-1]!==`
`)&&(P="(?: "+P+")",T=" "+T,M++),w=new RegExp("^(?:"+P+")",k)),h&&(w=new RegExp("^"+P+"$(?!\\s)",k)),d&&(O=y.lastIndex),x=c.call(L?w:y,T),L?x?(x.input=x.input.slice(M),x[0]=x[0].slice(M),x.index=y.lastIndex,y.lastIndex+=x[0].length):y.lastIndex=0:d&&x&&(y.lastIndex=y.global?x.index+x[0].length:O),h&&x&&x.length>1&&f.call(x[0],w,function(){for(I=1;I<arguments.length-2;I++)arguments[I]===void 0&&(x[I]=void 0)}),x}),r.exports=u},"94ca":function(r,s,e){var i=e("d039"),l=/#|\.prototype\./,c=function(h,p){var v=u[f(h)];return v==g?!0:v==d?!1:typeof p=="function"?i(p):!!p},f=c.normalize=function(h){return String(h).replace(l,".").toLowerCase()},u=c.data={},d=c.NATIVE="N",g=c.POLYFILL="P";r.exports=c},"99af":function(r,s,e){var i=e("23e7"),l=e("d039"),c=e("e8b5"),f=e("861d"),u=e("7b0b"),d=e("50c4"),g=e("8418"),h=e("65f0"),p=e("1dde"),v=e("b622"),m=e("2d00"),y=v("isConcatSpreadable"),O=9007199254740991,w="Maximum allowed index exceeded",x=m>=51||!l(function(){var P=[];return P[y]=!1,P.concat()[0]!==P}),I=p("concat"),L=function(P){if(!f(P))return!1;var M=P[y];return M!==void 0?!!M:c(P)},k=!x||!I;i({target:"Array",proto:!0,forced:k},{concat:function(M){var T=u(this),$=h(T,0),E=0,A,V,j,U,nt;for(A=-1,j=arguments.length;A<j;A++)if(nt=A===-1?T:arguments[A],L(nt)){if(U=d(nt.length),E+U>O)throw TypeError(w);for(V=0;V<U;V++,E++)V in nt&&g($,E,nt[V])}else{if(E>=O)throw TypeError(w);g($,E++,nt)}return $.length=E,$}})},"9bdd":function(r,s,e){var i=e("825a");r.exports=function(l,c,f,u){try{return u?c(i(f)[0],f[1]):c(f)}catch(g){var d=l.return;throw d!==void 0&&i(d.call(l)),g}}},"9bf2":function(r,s,e){var i=e("83ab"),l=e("0cfb"),c=e("825a"),f=e("c04e"),u=Object.defineProperty;s.f=i?u:function(g,h,p){if(c(g),h=f(h,!0),c(p),l)try{return u(g,h,p)}catch{}if("get"in p||"set"in p)throw TypeError("Accessors not supported");return"value"in p&&(g[h]=p.value),g}},"9ed3":function(r,s,e){var i=e("ae93").IteratorPrototype,l=e("7c73"),c=e("5c6c"),f=e("d44e"),u=e("3f8c"),d=function(){return this};r.exports=function(g,h,p){var v=h+" Iterator";return g.prototype=l(i,{next:c(1,p)}),f(g,v,!1,!0),u[v]=d,g}},"9f7f":function(r,s,e){var i=e("d039");function l(c,f){return RegExp(c,f)}s.UNSUPPORTED_Y=i(function(){var c=l("a","y");return c.lastIndex=2,c.exec("abcd")!=null}),s.BROKEN_CARET=i(function(){var c=l("^r","gy");return c.lastIndex=2,c.exec("str")!=null})},a2bf:function(r,s,e){var i=e("e8b5"),l=e("50c4"),c=e("0366"),f=function(u,d,g,h,p,v,m,y){for(var O=p,w=0,x=m?c(m,y,3):!1,I;w<h;){if(w in g){if(I=x?x(g[w],w,d):g[w],v>0&&i(I))O=f(u,d,I,l(I.length),O,v-1)-1;else{if(O>=9007199254740991)throw TypeError("Exceed the acceptable array length");u[O]=I}O++}w++}return O};r.exports=f},a352:function(r,s){r.exports=o},a434:function(r,s,e){var i=e("23e7"),l=e("23cb"),c=e("a691"),f=e("50c4"),u=e("7b0b"),d=e("65f0"),g=e("8418"),h=e("1dde"),p=e("ae40"),v=h("splice"),m=p("splice",{ACCESSORS:!0,0:0,1:2}),y=Math.max,O=Math.min,w=9007199254740991,x="Maximum allowed length exceeded";i({target:"Array",proto:!0,forced:!v||!m},{splice:function(L,k){var P=u(this),M=f(P.length),T=l(L,M),$=arguments.length,E,A,V,j,U,nt;if($===0?E=A=0:$===1?(E=0,A=M-T):(E=$-2,A=O(y(c(k),0),M-T)),M+E-A>w)throw TypeError(x);for(V=d(P,A),j=0;j<A;j++)U=T+j,U in P&&g(V,j,P[U]);if(V.length=A,E<A){for(j=T;j<M-A;j++)U=j+A,nt=j+E,U in P?P[nt]=P[U]:delete P[nt];for(j=M;j>M-A+E;j--)delete P[j-1]}else if(E>A)for(j=M-A;j>T;j--)U=j+A-1,nt=j+E-1,U in P?P[nt]=P[U]:delete P[nt];for(j=0;j<E;j++)P[j+T]=arguments[j+2];return P.length=M-A+E,V}})},a4d3:function(r,s,e){var i=e("23e7"),l=e("da84"),c=e("d066"),f=e("c430"),u=e("83ab"),d=e("4930"),g=e("fdbf"),h=e("d039"),p=e("5135"),v=e("e8b5"),m=e("861d"),y=e("825a"),O=e("7b0b"),w=e("fc6a"),x=e("c04e"),I=e("5c6c"),L=e("7c73"),k=e("df75"),P=e("241c"),M=e("057f"),T=e("7418"),$=e("06cf"),E=e("9bf2"),A=e("d1e7"),V=e("9112"),j=e("6eeb"),U=e("5692"),nt=e("f772"),ct=e("d012"),q=e("90e3"),it=e("b622"),ot=e("e538"),Ot=e("746f"),Dt=e("d44e"),Ct=e("69f3"),ht=e("b727").forEach,mt=nt("hidden"),Gt="Symbol",Ft="prototype",se=it("toPrimitive"),Se=Ct.set,ue=Ct.getterFor(Gt),Rt=Object[Ft],At=l.Symbol,Ee=c("JSON","stringify"),ee=$.f,ne=E.f,mn=M.f,Gn=A.f,Qt=U("symbols"),fe=U("op-symbols"),Oe=U("string-to-symbol-registry"),Ue=U("symbol-to-string-registry"),He=U("wks"),We=l.QObject,Ve=!We||!We[Ft]||!We[Ft].findChild,Be=u&&h(function(){return L(ne({},"a",{get:function(){return ne(this,"a",{value:7}).a}})).a!=7})?function(Y,G,K){var et=ee(Rt,G);et&&delete Rt[G],ne(Y,G,K),et&&Y!==Rt&&ne(Rt,G,et)}:ne,Ge=function(Y,G){var K=Qt[Y]=L(At[Ft]);return Se(K,{type:Gt,tag:Y,description:G}),u||(K.description=G),K},S=g?function(Y){return typeof Y=="symbol"}:function(Y){return Object(Y)instanceof At},b=function(G,K,et){G===Rt&&b(fe,K,et),y(G);var rt=x(K,!0);return y(et),p(Qt,rt)?(et.enumerable?(p(G,mt)&&G[mt][rt]&&(G[mt][rt]=!1),et=L(et,{enumerable:I(0,!1)})):(p(G,mt)||ne(G,mt,I(1,{})),G[mt][rt]=!0),Be(G,rt,et)):ne(G,rt,et)},C=function(G,K){y(G);var et=w(K),rt=k(et).concat(at(et));return ht(rt,function(Ht){(!u||H.call(et,Ht))&&b(G,Ht,et[Ht])}),G},R=function(G,K){return K===void 0?L(G):C(L(G),K)},H=function(G){var K=x(G,!0),et=Gn.call(this,K);return this===Rt&&p(Qt,K)&&!p(fe,K)?!1:et||!p(this,K)||!p(Qt,K)||p(this,mt)&&this[mt][K]?et:!0},X=function(G,K){var et=w(G),rt=x(K,!0);if(!(et===Rt&&p(Qt,rt)&&!p(fe,rt))){var Ht=ee(et,rt);return Ht&&p(Qt,rt)&&!(p(et,mt)&&et[mt][rt])&&(Ht.enumerable=!0),Ht}},Z=function(G){var K=mn(w(G)),et=[];return ht(K,function(rt){!p(Qt,rt)&&!p(ct,rt)&&et.push(rt)}),et},at=function(G){var K=G===Rt,et=mn(K?fe:w(G)),rt=[];return ht(et,function(Ht){p(Qt,Ht)&&(!K||p(Rt,Ht))&&rt.push(Qt[Ht])}),rt};if(d||(At=function(){if(this instanceof At)throw TypeError("Symbol is not a constructor");var G=!arguments.length||arguments[0]===void 0?void 0:String(arguments[0]),K=q(G),et=function(rt){this===Rt&&et.call(fe,rt),p(this,mt)&&p(this[mt],K)&&(this[mt][K]=!1),Be(this,K,I(1,rt))};return u&&Ve&&Be(Rt,K,{configurable:!0,set:et}),Ge(K,G)},j(At[Ft],"toString",function(){return ue(this).tag}),j(At,"withoutSetter",function(Y){return Ge(q(Y),Y)}),A.f=H,E.f=b,$.f=X,P.f=M.f=Z,T.f=at,ot.f=function(Y){return Ge(it(Y),Y)},u&&(ne(At[Ft],"description",{configurable:!0,get:function(){return ue(this).description}}),f||j(Rt,"propertyIsEnumerable",H,{unsafe:!0}))),i({global:!0,wrap:!0,forced:!d,sham:!d},{Symbol:At}),ht(k(He),function(Y){Ot(Y)}),i({target:Gt,stat:!0,forced:!d},{for:function(Y){var G=String(Y);if(p(Oe,G))return Oe[G];var K=At(G);return Oe[G]=K,Ue[K]=G,K},keyFor:function(G){if(!S(G))throw TypeError(G+" is not a symbol");if(p(Ue,G))return Ue[G]},useSetter:function(){Ve=!0},useSimple:function(){Ve=!1}}),i({target:"Object",stat:!0,forced:!d,sham:!u},{create:R,defineProperty:b,defineProperties:C,getOwnPropertyDescriptor:X}),i({target:"Object",stat:!0,forced:!d},{getOwnPropertyNames:Z,getOwnPropertySymbols:at}),i({target:"Object",stat:!0,forced:h(function(){T.f(1)})},{getOwnPropertySymbols:function(G){return T.f(O(G))}}),Ee){var Tt=!d||h(function(){var Y=At();return Ee([Y])!="[null]"||Ee({a:Y})!="{}"||Ee(Object(Y))!="{}"});i({target:"JSON",stat:!0,forced:Tt},{stringify:function(G,K,et){for(var rt=[G],Ht=1,Kn;arguments.length>Ht;)rt.push(arguments[Ht++]);if(Kn=K,!(!m(K)&&G===void 0||S(G)))return v(K)||(K=function($o,yn){if(typeof Kn=="function"&&(yn=Kn.call(this,$o,yn)),!S(yn))return yn}),rt[1]=K,Ee.apply(null,rt)}})}At[Ft][se]||V(At[Ft],se,At[Ft].valueOf),Dt(At,Gt),ct[mt]=!0},a630:function(r,s,e){var i=e("23e7"),l=e("4df4"),c=e("1c7e"),f=!c(function(u){Array.from(u)});i({target:"Array",stat:!0,forced:f},{from:l})},a640:function(r,s,e){var i=e("d039");r.exports=function(l,c){var f=[][l];return!!f&&i(function(){f.call(null,c||function(){throw 1},1)})}},a691:function(r,s){var e=Math.ceil,i=Math.floor;r.exports=function(l){return isNaN(l=+l)?0:(l>0?i:e)(l)}},ab13:function(r,s,e){var i=e("b622"),l=i("match");r.exports=function(c){var f=/./;try{"/./"[c](f)}catch{try{return f[l]=!1,"/./"[c](f)}catch{}}return!1}},ac1f:function(r,s,e){var i=e("23e7"),l=e("9263");i({target:"RegExp",proto:!0,forced:/./.exec!==l},{exec:l})},ad6d:function(r,s,e){var i=e("825a");r.exports=function(){var l=i(this),c="";return l.global&&(c+="g"),l.ignoreCase&&(c+="i"),l.multiline&&(c+="m"),l.dotAll&&(c+="s"),l.unicode&&(c+="u"),l.sticky&&(c+="y"),c}},ae40:function(r,s,e){var i=e("83ab"),l=e("d039"),c=e("5135"),f=Object.defineProperty,u={},d=function(g){throw g};r.exports=function(g,h){if(c(u,g))return u[g];h||(h={});var p=[][g],v=c(h,"ACCESSORS")?h.ACCESSORS:!1,m=c(h,0)?h[0]:d,y=c(h,1)?h[1]:void 0;return u[g]=!!p&&!l(function(){if(v&&!i)return!0;var O={length:-1};v?f(O,1,{enumerable:!0,get:d}):O[1]=1,p.call(O,m,y)})}},ae93:function(r,s,e){var i=e("e163"),l=e("9112"),c=e("5135"),f=e("b622"),u=e("c430"),d=f("iterator"),g=!1,h=function(){return this},p,v,m;[].keys&&(m=[].keys(),"next"in m?(v=i(i(m)),v!==Object.prototype&&(p=v)):g=!0),p==null&&(p={}),!u&&!c(p,d)&&l(p,d,h),r.exports={IteratorPrototype:p,BUGGY_SAFARI_ITERATORS:g}},b041:function(r,s,e){var i=e("00ee"),l=e("f5df");r.exports=i?{}.toString:function(){return"[object "+l(this)+"]"}},b0c0:function(r,s,e){var i=e("83ab"),l=e("9bf2").f,c=Function.prototype,f=c.toString,u=/^\s*function ([^ (]*)/,d="name";i&&!(d in c)&&l(c,d,{configurable:!0,get:function(){try{return f.call(this).match(u)[1]}catch{return""}}})},b622:function(r,s,e){var i=e("da84"),l=e("5692"),c=e("5135"),f=e("90e3"),u=e("4930"),d=e("fdbf"),g=l("wks"),h=i.Symbol,p=d?h:h&&h.withoutSetter||f;r.exports=function(v){return c(g,v)||(u&&c(h,v)?g[v]=h[v]:g[v]=p("Symbol."+v)),g[v]}},b64b:function(r,s,e){var i=e("23e7"),l=e("7b0b"),c=e("df75"),f=e("d039"),u=f(function(){c(1)});i({target:"Object",stat:!0,forced:u},{keys:function(g){return c(l(g))}})},b727:function(r,s,e){var i=e("0366"),l=e("44ad"),c=e("7b0b"),f=e("50c4"),u=e("65f0"),d=[].push,g=function(h){var p=h==1,v=h==2,m=h==3,y=h==4,O=h==6,w=h==5||O;return function(x,I,L,k){for(var P=c(x),M=l(P),T=i(I,L,3),$=f(M.length),E=0,A=k||u,V=p?A(x,$):v?A(x,0):void 0,j,U;$>E;E++)if((w||E in M)&&(j=M[E],U=T(j,E,P),h)){if(p)V[E]=U;else if(U)switch(h){case 3:return!0;case 5:return j;case 6:return E;case 2:d.call(V,j)}else if(y)return!1}return O?-1:m||y?y:V}};r.exports={forEach:g(0),map:g(1),filter:g(2),some:g(3),every:g(4),find:g(5),findIndex:g(6)}},c04e:function(r,s,e){var i=e("861d");r.exports=function(l,c){if(!i(l))return l;var f,u;if(c&&typeof(f=l.toString)=="function"&&!i(u=f.call(l))||typeof(f=l.valueOf)=="function"&&!i(u=f.call(l))||!c&&typeof(f=l.toString)=="function"&&!i(u=f.call(l)))return u;throw TypeError("Can't convert object to primitive value")}},c430:function(r,s){r.exports=!1},c6b6:function(r,s){var e={}.toString;r.exports=function(i){return e.call(i).slice(8,-1)}},c6cd:function(r,s,e){var i=e("da84"),l=e("ce4e"),c="__core-js_shared__",f=i[c]||l(c,{});r.exports=f},c740:function(r,s,e){var i=e("23e7"),l=e("b727").findIndex,c=e("44d2"),f=e("ae40"),u="findIndex",d=!0,g=f(u);u in[]&&Array(1)[u](function(){d=!1}),i({target:"Array",proto:!0,forced:d||!g},{findIndex:function(p){return l(this,p,arguments.length>1?arguments[1]:void 0)}}),c(u)},c8ba:function(r,s){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch{typeof window=="object"&&(e=window)}r.exports=e},c975:function(r,s,e){var i=e("23e7"),l=e("4d64").indexOf,c=e("a640"),f=e("ae40"),u=[].indexOf,d=!!u&&1/[1].indexOf(1,-0)<0,g=c("indexOf"),h=f("indexOf",{ACCESSORS:!0,1:0});i({target:"Array",proto:!0,forced:d||!g||!h},{indexOf:function(v){return d?u.apply(this,arguments)||0:l(this,v,arguments.length>1?arguments[1]:void 0)}})},ca84:function(r,s,e){var i=e("5135"),l=e("fc6a"),c=e("4d64").indexOf,f=e("d012");r.exports=function(u,d){var g=l(u),h=0,p=[],v;for(v in g)!i(f,v)&&i(g,v)&&p.push(v);for(;d.length>h;)i(g,v=d[h++])&&(~c(p,v)||p.push(v));return p}},caad:function(r,s,e){var i=e("23e7"),l=e("4d64").includes,c=e("44d2"),f=e("ae40"),u=f("indexOf",{ACCESSORS:!0,1:0});i({target:"Array",proto:!0,forced:!u},{includes:function(g){return l(this,g,arguments.length>1?arguments[1]:void 0)}}),c("includes")},cc12:function(r,s,e){var i=e("da84"),l=e("861d"),c=i.document,f=l(c)&&l(c.createElement);r.exports=function(u){return f?c.createElement(u):{}}},ce4e:function(r,s,e){var i=e("da84"),l=e("9112");r.exports=function(c,f){try{l(i,c,f)}catch{i[c]=f}return f}},d012:function(r,s){r.exports={}},d039:function(r,s){r.exports=function(e){try{return!!e()}catch{return!0}}},d066:function(r,s,e){var i=e("428f"),l=e("da84"),c=function(f){return typeof f=="function"?f:void 0};r.exports=function(f,u){return arguments.length<2?c(i[f])||c(l[f]):i[f]&&i[f][u]||l[f]&&l[f][u]}},d1e7:function(r,s,e){var i={}.propertyIsEnumerable,l=Object.getOwnPropertyDescriptor,c=l&&!i.call({1:2},1);s.f=c?function(u){var d=l(this,u);return!!d&&d.enumerable}:i},d28b:function(r,s,e){var i=e("746f");i("iterator")},d2bb:function(r,s,e){var i=e("825a"),l=e("3bbe");r.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var c=!1,f={},u;try{u=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set,u.call(f,[]),c=f instanceof Array}catch{}return function(g,h){return i(g),l(h),c?u.call(g,h):g.__proto__=h,g}}():void 0)},d3b7:function(r,s,e){var i=e("00ee"),l=e("6eeb"),c=e("b041");i||l(Object.prototype,"toString",c,{unsafe:!0})},d44e:function(r,s,e){var i=e("9bf2").f,l=e("5135"),c=e("b622"),f=c("toStringTag");r.exports=function(u,d,g){u&&!l(u=g?u:u.prototype,f)&&i(u,f,{configurable:!0,value:d})}},d58f:function(r,s,e){var i=e("1c0b"),l=e("7b0b"),c=e("44ad"),f=e("50c4"),u=function(d){return function(g,h,p,v){i(h);var m=l(g),y=c(m),O=f(m.length),w=d?O-1:0,x=d?-1:1;if(p<2)for(;;){if(w in y){v=y[w],w+=x;break}if(w+=x,d?w<0:O<=w)throw TypeError("Reduce of empty array with no initial value")}for(;d?w>=0:O>w;w+=x)w in y&&(v=h(v,y[w],w,m));return v}};r.exports={left:u(!1),right:u(!0)}},d784:function(r,s,e){e("ac1f");var i=e("6eeb"),l=e("d039"),c=e("b622"),f=e("9263"),u=e("9112"),d=c("species"),g=!l(function(){var y=/./;return y.exec=function(){var O=[];return O.groups={a:"7"},O},"".replace(y,"$<a>")!=="7"}),h=function(){return"a".replace(/./,"$0")==="$0"}(),p=c("replace"),v=function(){return/./[p]?/./[p]("a","$0")==="":!1}(),m=!l(function(){var y=/(?:)/,O=y.exec;y.exec=function(){return O.apply(this,arguments)};var w="ab".split(y);return w.length!==2||w[0]!=="a"||w[1]!=="b"});r.exports=function(y,O,w,x){var I=c(y),L=!l(function(){var E={};return E[I]=function(){return 7},""[y](E)!=7}),k=L&&!l(function(){var E=!1,A=/a/;return y==="split"&&(A={},A.constructor={},A.constructor[d]=function(){return A},A.flags="",A[I]=/./[I]),A.exec=function(){return E=!0,null},A[I](""),!E});if(!L||!k||y==="replace"&&!(g&&h&&!v)||y==="split"&&!m){var P=/./[I],M=w(I,""[y],function(E,A,V,j,U){return A.exec===f?L&&!U?{done:!0,value:P.call(A,V,j)}:{done:!0,value:E.call(V,A,j)}:{done:!1}},{REPLACE_KEEPS_$0:h,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:v}),T=M[0],$=M[1];i(String.prototype,y,T),i(RegExp.prototype,I,O==2?function(E,A){return $.call(E,this,A)}:function(E){return $.call(E,this)})}x&&u(RegExp.prototype[I],"sham",!0)}},d81d:function(r,s,e){var i=e("23e7"),l=e("b727").map,c=e("1dde"),f=e("ae40"),u=c("map"),d=f("map");i({target:"Array",proto:!0,forced:!u||!d},{map:function(h){return l(this,h,arguments.length>1?arguments[1]:void 0)}})},da84:function(r,s,e){(function(i){var l=function(c){return c&&c.Math==Math&&c};r.exports=l(typeof globalThis=="object"&&globalThis)||l(typeof window=="object"&&window)||l(typeof self=="object"&&self)||l(typeof i=="object"&&i)||Function("return this")()}).call(this,e("c8ba"))},dbb4:function(r,s,e){var i=e("23e7"),l=e("83ab"),c=e("56ef"),f=e("fc6a"),u=e("06cf"),d=e("8418");i({target:"Object",stat:!0,sham:!l},{getOwnPropertyDescriptors:function(h){for(var p=f(h),v=u.f,m=c(p),y={},O=0,w,x;m.length>O;)x=v(p,w=m[O++]),x!==void 0&&d(y,w,x);return y}})},dbf1:function(r,s,e){(function(i){e.d(s,"a",function(){return c});function l(){return typeof window<"u"?window.console:i.console}var c=l()}).call(this,e("c8ba"))},ddb0:function(r,s,e){var i=e("da84"),l=e("fdbc"),c=e("e260"),f=e("9112"),u=e("b622"),d=u("iterator"),g=u("toStringTag"),h=c.values;for(var p in l){var v=i[p],m=v&&v.prototype;if(m){if(m[d]!==h)try{f(m,d,h)}catch{m[d]=h}if(m[g]||f(m,g,p),l[p]){for(var y in c)if(m[y]!==c[y])try{f(m,y,c[y])}catch{m[y]=c[y]}}}}},df75:function(r,s,e){var i=e("ca84"),l=e("7839");r.exports=Object.keys||function(f){return i(f,l)}},e01a:function(r,s,e){var i=e("23e7"),l=e("83ab"),c=e("da84"),f=e("5135"),u=e("861d"),d=e("9bf2").f,g=e("e893"),h=c.Symbol;if(l&&typeof h=="function"&&(!("description"in h.prototype)||h().description!==void 0)){var p={},v=function(){var I=arguments.length<1||arguments[0]===void 0?void 0:String(arguments[0]),L=this instanceof v?new h(I):I===void 0?h():h(I);return I===""&&(p[L]=!0),L};g(v,h);var m=v.prototype=h.prototype;m.constructor=v;var y=m.toString,O=String(h("test"))=="Symbol(test)",w=/^Symbol\((.*)\)[^)]+$/;d(m,"description",{configurable:!0,get:function(){var I=u(this)?this.valueOf():this,L=y.call(I);if(f(p,I))return"";var k=O?L.slice(7,-1):L.replace(w,"$1");return k===""?void 0:k}}),i({global:!0,forced:!0},{Symbol:v})}},e163:function(r,s,e){var i=e("5135"),l=e("7b0b"),c=e("f772"),f=e("e177"),u=c("IE_PROTO"),d=Object.prototype;r.exports=f?Object.getPrototypeOf:function(g){return g=l(g),i(g,u)?g[u]:typeof g.constructor=="function"&&g instanceof g.constructor?g.constructor.prototype:g instanceof Object?d:null}},e177:function(r,s,e){var i=e("d039");r.exports=!i(function(){function l(){}return l.prototype.constructor=null,Object.getPrototypeOf(new l)!==l.prototype})},e260:function(r,s,e){var i=e("fc6a"),l=e("44d2"),c=e("3f8c"),f=e("69f3"),u=e("7dd0"),d="Array Iterator",g=f.set,h=f.getterFor(d);r.exports=u(Array,"Array",function(p,v){g(this,{type:d,target:i(p),index:0,kind:v})},function(){var p=h(this),v=p.target,m=p.kind,y=p.index++;return!v||y>=v.length?(p.target=void 0,{value:void 0,done:!0}):m=="keys"?{value:y,done:!1}:m=="values"?{value:v[y],done:!1}:{value:[y,v[y]],done:!1}},"values"),c.Arguments=c.Array,l("keys"),l("values"),l("entries")},e439:function(r,s,e){var i=e("23e7"),l=e("d039"),c=e("fc6a"),f=e("06cf").f,u=e("83ab"),d=l(function(){f(1)}),g=!u||d;i({target:"Object",stat:!0,forced:g,sham:!u},{getOwnPropertyDescriptor:function(p,v){return f(c(p),v)}})},e538:function(r,s,e){var i=e("b622");s.f=i},e893:function(r,s,e){var i=e("5135"),l=e("56ef"),c=e("06cf"),f=e("9bf2");r.exports=function(u,d){for(var g=l(d),h=f.f,p=c.f,v=0;v<g.length;v++){var m=g[v];i(u,m)||h(u,m,p(d,m))}}},e8b5:function(r,s,e){var i=e("c6b6");r.exports=Array.isArray||function(c){return i(c)=="Array"}},e95a:function(r,s,e){var i=e("b622"),l=e("3f8c"),c=i("iterator"),f=Array.prototype;r.exports=function(u){return u!==void 0&&(l.Array===u||f[c]===u)}},f5df:function(r,s,e){var i=e("00ee"),l=e("c6b6"),c=e("b622"),f=c("toStringTag"),u=l(function(){return arguments}())=="Arguments",d=function(g,h){try{return g[h]}catch{}};r.exports=i?l:function(g){var h,p,v;return g===void 0?"Undefined":g===null?"Null":typeof(p=d(h=Object(g),f))=="string"?p:u?l(h):(v=l(h))=="Object"&&typeof h.callee=="function"?"Arguments":v}},f772:function(r,s,e){var i=e("5692"),l=e("90e3"),c=i("keys");r.exports=function(f){return c[f]||(c[f]=l(f))}},fb15:function(r,s,e){if(e.r(s),typeof window<"u"){var i=window.document.currentScript;{var l=e("8875");i=l(),"currentScript"in document||Object.defineProperty(document,"currentScript",{get:l})}var c=i&&i.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);c&&(e.p=c[1])}e("99af"),e("4de4"),e("4160"),e("c975"),e("d81d"),e("a434"),e("159b"),e("a4d3"),e("e439"),e("dbb4"),e("b64b");function f(S,b,C){return b in S?Object.defineProperty(S,b,{value:C,enumerable:!0,configurable:!0,writable:!0}):S[b]=C,S}function u(S,b){var C=Object.keys(S);if(Object.getOwnPropertySymbols){var R=Object.getOwnPropertySymbols(S);b&&(R=R.filter(function(H){return Object.getOwnPropertyDescriptor(S,H).enumerable})),C.push.apply(C,R)}return C}function d(S){for(var b=1;b<arguments.length;b++){var C=arguments[b]!=null?arguments[b]:{};b%2?u(Object(C),!0).forEach(function(R){f(S,R,C[R])}):Object.getOwnPropertyDescriptors?Object.defineProperties(S,Object.getOwnPropertyDescriptors(C)):u(Object(C)).forEach(function(R){Object.defineProperty(S,R,Object.getOwnPropertyDescriptor(C,R))})}return S}function g(S){if(Array.isArray(S))return S}e("e01a"),e("d28b"),e("e260"),e("d3b7"),e("3ca3"),e("ddb0");function h(S,b){if(!(typeof Symbol>"u"||!(Symbol.iterator in Object(S)))){var C=[],R=!0,H=!1,X=void 0;try{for(var Z=S[Symbol.iterator](),at;!(R=(at=Z.next()).done)&&(C.push(at.value),!(b&&C.length===b));R=!0);}catch(Tt){H=!0,X=Tt}finally{try{!R&&Z.return!=null&&Z.return()}finally{if(H)throw X}}return C}}e("a630"),e("fb6a"),e("b0c0"),e("25f0");function p(S,b){(b==null||b>S.length)&&(b=S.length);for(var C=0,R=new Array(b);C<b;C++)R[C]=S[C];return R}function v(S,b){if(!!S){if(typeof S=="string")return p(S,b);var C=Object.prototype.toString.call(S).slice(8,-1);if(C==="Object"&&S.constructor&&(C=S.constructor.name),C==="Map"||C==="Set")return Array.from(S);if(C==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C))return p(S,b)}}function m(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function y(S,b){return g(S)||h(S,b)||v(S,b)||m()}function O(S){if(Array.isArray(S))return p(S)}function w(S){if(typeof Symbol<"u"&&Symbol.iterator in Object(S))return Array.from(S)}function x(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function I(S){return O(S)||w(S)||v(S)||x()}var L=e("a352"),k=e.n(L);function P(S){S.parentElement!==null&&S.parentElement.removeChild(S)}function M(S,b,C){var R=C===0?S.children[0]:S.children[C-1].nextSibling;S.insertBefore(b,R)}var T=e("dbf1");e("13d5"),e("4fad"),e("ac1f"),e("5319");function $(S){var b=Object.create(null);return function(R){var H=b[R];return H||(b[R]=S(R))}}var E=/-(\w)/g,A=$(function(S){return S.replace(E,function(b,C){return C.toUpperCase()})});e("5db7"),e("73d9");var V=["Start","Add","Remove","Update","End"],j=["Choose","Unchoose","Sort","Filter","Clone"],U=["Move"],nt=[U,V,j].flatMap(function(S){return S}).map(function(S){return"on".concat(S)}),ct={manage:U,manageAndEmit:V,emit:j};function q(S){return nt.indexOf(S)!==-1}e("caad"),e("2ca0");var it=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","label","legend","li","link","main","map","mark","math","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rb","rp","rt","rtc","ruby","s","samp","script","section","select","slot","small","source","span","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"];function ot(S){return it.includes(S)}function Ot(S){return["transition-group","TransitionGroup"].includes(S)}function Dt(S){return["id","class","role","style"].includes(S)||S.startsWith("data-")||S.startsWith("aria-")||S.startsWith("on")}function Ct(S){return S.reduce(function(b,C){var R=y(C,2),H=R[0],X=R[1];return b[H]=X,b},{})}function ht(S){var b=S.$attrs,C=S.componentData,R=C===void 0?{}:C,H=Ct(Object.entries(b).filter(function(X){var Z=y(X,2),at=Z[0];return Z[1],Dt(at)}));return d(d({},H),R)}function mt(S){var b=S.$attrs,C=S.callBackBuilder,R=Ct(Gt(b));Object.entries(C).forEach(function(X){var Z=y(X,2),at=Z[0],Tt=Z[1];ct[at].forEach(function(Y){R["on".concat(Y)]=Tt(Y)})});var H="[data-draggable]".concat(R.draggable||"");return d(d({},R),{},{draggable:H})}function Gt(S){return Object.entries(S).filter(function(b){var C=y(b,2),R=C[0];return C[1],!Dt(R)}).map(function(b){var C=y(b,2),R=C[0],H=C[1];return[A(R),H]}).filter(function(b){var C=y(b,2),R=C[0];return C[1],!q(R)})}e("c740");function Ft(S,b){if(!(S instanceof b))throw new TypeError("Cannot call a class as a function")}function se(S,b){for(var C=0;C<b.length;C++){var R=b[C];R.enumerable=R.enumerable||!1,R.configurable=!0,"value"in R&&(R.writable=!0),Object.defineProperty(S,R.key,R)}}function Se(S,b,C){return b&&se(S.prototype,b),C&&se(S,C),S}var ue=function(b){var C=b.el;return C},Rt=function(b,C){return b.__draggable_context=C},At=function(b){return b.__draggable_context},Ee=function(){function S(b){var C=b.nodes,R=C.header,H=C.default,X=C.footer,Z=b.root,at=b.realList;Ft(this,S),this.defaultNodes=H,this.children=[].concat(I(R),I(H),I(X)),this.externalComponent=Z.externalComponent,this.rootTransition=Z.transition,this.tag=Z.tag,this.realList=at}return Se(S,[{key:"render",value:function(C,R){var H=this.tag,X=this.children,Z=this._isRootComponent,at=Z?{default:function(){return X}}:X;return C(H,R,at)}},{key:"updated",value:function(){var C=this.defaultNodes,R=this.realList;C.forEach(function(H,X){Rt(ue(H),{element:R[X],index:X})})}},{key:"getUnderlyingVm",value:function(C){return At(C)}},{key:"getVmIndexFromDomIndex",value:function(C,R){var H=this.defaultNodes,X=H.length,Z=R.children,at=Z.item(C);if(at===null)return X;var Tt=At(at);if(Tt)return Tt.index;if(X===0)return 0;var Y=ue(H[0]),G=I(Z).findIndex(function(K){return K===Y});return C<G?0:X}},{key:"_isRootComponent",get:function(){return this.externalComponent||this.rootTransition}}]),S}(),ee=e("8bbf");function ne(S,b){var C=S[b];return C?C():[]}function mn(S){var b=S.$slots,C=S.realList,R=S.getKey,H=C||[],X=["header","footer"].map(function(K){return ne(b,K)}),Z=y(X,2),at=Z[0],Tt=Z[1],Y=b.item;if(!Y)throw new Error("draggable element must have an item slot");var G=H.flatMap(function(K,et){return Y({element:K,index:et}).map(function(rt){return rt.key=R(K),rt.props=d(d({},rt.props||{}),{},{"data-draggable":!0}),rt})});if(G.length!==H.length)throw new Error("Item slot must have only one child");return{header:at,footer:Tt,default:G}}function Gn(S){var b=Ot(S),C=!ot(S)&&!b;return{transition:b,externalComponent:C,tag:C?Object(ee.resolveComponent)(S):b?ee.TransitionGroup:S}}function Qt(S){var b=S.$slots,C=S.tag,R=S.realList,H=S.getKey,X=mn({$slots:b,realList:R,getKey:H}),Z=Gn(C);return new Ee({nodes:X,root:Z,realList:R})}function fe(S,b){var C=this;Object(ee.nextTick)(function(){return C.$emit(S.toLowerCase(),b)})}function Oe(S){var b=this;return function(C,R){if(b.realList!==null)return b["onDrag".concat(S)](C,R)}}function Ue(S){var b=this,C=Oe.call(this,S);return function(R,H){C.call(b,R,H),fe.call(b,S,R)}}var He=null,We={list:{type:Array,required:!1,default:null},modelValue:{type:Array,required:!1,default:null},itemKey:{type:[String,Function],required:!0},clone:{type:Function,default:function(b){return b}},tag:{type:String,default:"div"},move:{type:Function,default:null},componentData:{type:Object,required:!1,default:null}},Ve=["update:modelValue","change"].concat(I([].concat(I(ct.manageAndEmit),I(ct.emit)).map(function(S){return S.toLowerCase()}))),Be=Object(ee.defineComponent)({name:"draggable",inheritAttrs:!1,props:We,emits:Ve,data:function(){return{error:!1}},render:function(){try{this.error=!1;var b=this.$slots,C=this.$attrs,R=this.tag,H=this.componentData,X=this.realList,Z=this.getKey,at=Qt({$slots:b,tag:R,realList:X,getKey:Z});this.componentStructure=at;var Tt=ht({$attrs:C,componentData:H});return at.render(ee.h,Tt)}catch(Y){return this.error=!0,Object(ee.h)("pre",{style:{color:"red"}},Y.stack)}},created:function(){this.list!==null&&this.modelValue!==null&&T.a.error("modelValue and list props are mutually exclusive! Please set one or another.")},mounted:function(){var b=this;if(!this.error){var C=this.$attrs,R=this.$el,H=this.componentStructure;H.updated();var X=mt({$attrs:C,callBackBuilder:{manageAndEmit:function(Tt){return Ue.call(b,Tt)},emit:function(Tt){return fe.bind(b,Tt)},manage:function(Tt){return Oe.call(b,Tt)}}}),Z=R.nodeType===1?R:R.parentElement;this._sortable=new k.a(Z,X),this.targetDomElement=Z,Z.__draggable_component__=this}},updated:function(){this.componentStructure.updated()},beforeUnmount:function(){this._sortable!==void 0&&this._sortable.destroy()},computed:{realList:function(){var b=this.list;return b||this.modelValue},getKey:function(){var b=this.itemKey;return typeof b=="function"?b:function(C){return C[b]}}},watch:{$attrs:{handler:function(b){var C=this._sortable;!C||Gt(b).forEach(function(R){var H=y(R,2),X=H[0],Z=H[1];C.option(X,Z)})},deep:!0}},methods:{getUnderlyingVm:function(b){return this.componentStructure.getUnderlyingVm(b)||null},getUnderlyingPotencialDraggableComponent:function(b){return b.__draggable_component__},emitChanges:function(b){var C=this;Object(ee.nextTick)(function(){return C.$emit("change",b)})},alterList:function(b){if(this.list){b(this.list);return}var C=I(this.modelValue);b(C),this.$emit("update:modelValue",C)},spliceList:function(){var b=arguments,C=function(H){return H.splice.apply(H,I(b))};this.alterList(C)},updatePosition:function(b,C){var R=function(X){return X.splice(C,0,X.splice(b,1)[0])};this.alterList(R)},getRelatedContextFromMoveEvent:function(b){var C=b.to,R=b.related,H=this.getUnderlyingPotencialDraggableComponent(C);if(!H)return{component:H};var X=H.realList,Z={list:X,component:H};if(C!==R&&X){var at=H.getUnderlyingVm(R)||{};return d(d({},at),Z)}return Z},getVmIndexFromDomIndex:function(b){return this.componentStructure.getVmIndexFromDomIndex(b,this.targetDomElement)},onDragStart:function(b){this.context=this.getUnderlyingVm(b.item),b.item._underlying_vm_=this.clone(this.context.element),He=b.item},onDragAdd:function(b){var C=b.item._underlying_vm_;if(C!==void 0){P(b.item);var R=this.getVmIndexFromDomIndex(b.newIndex);this.spliceList(R,0,C);var H={element:C,newIndex:R};this.emitChanges({added:H})}},onDragRemove:function(b){if(M(this.$el,b.item,b.oldIndex),b.pullMode==="clone"){P(b.clone);return}var C=this.context,R=C.index,H=C.element;this.spliceList(R,1);var X={element:H,oldIndex:R};this.emitChanges({removed:X})},onDragUpdate:function(b){P(b.item),M(b.from,b.item,b.oldIndex);var C=this.context.index,R=this.getVmIndexFromDomIndex(b.newIndex);this.updatePosition(C,R);var H={element:this.context.element,oldIndex:C,newIndex:R};this.emitChanges({moved:H})},computeFutureIndex:function(b,C){if(!b.element)return 0;var R=I(C.to.children).filter(function(at){return at.style.display!=="none"}),H=R.indexOf(C.related),X=b.component.getVmIndexFromDomIndex(H),Z=R.indexOf(He)!==-1;return Z||!C.willInsertAfter?X:X+1},onDragMove:function(b,C){var R=this.move,H=this.realList;if(!R||!H)return!0;var X=this.getRelatedContextFromMoveEvent(b),Z=this.computeFutureIndex(X,b),at=d(d({},this.context),{},{futureIndex:Z}),Tt=d(d({},b),{},{relatedContext:X,draggedContext:at});return R(Tt,C)},onDragEnd:function(){He=null}}}),Ge=Be;s.default=Ge},fb6a:function(r,s,e){var i=e("23e7"),l=e("861d"),c=e("e8b5"),f=e("23cb"),u=e("50c4"),d=e("fc6a"),g=e("8418"),h=e("b622"),p=e("1dde"),v=e("ae40"),m=p("slice"),y=v("slice",{ACCESSORS:!0,0:0,1:2}),O=h("species"),w=[].slice,x=Math.max;i({target:"Array",proto:!0,forced:!m||!y},{slice:function(L,k){var P=d(this),M=u(P.length),T=f(L,M),$=f(k===void 0?M:k,M),E,A,V;if(c(P)&&(E=P.constructor,typeof E=="function"&&(E===Array||c(E.prototype))?E=void 0:l(E)&&(E=E[O],E===null&&(E=void 0)),E===Array||E===void 0))return w.call(P,T,$);for(A=new(E===void 0?Array:E)(x($-T,0)),V=0;T<$;T++,V++)T in P&&g(A,V,P[T]);return A.length=V,A}})},fc6a:function(r,s,e){var i=e("44ad"),l=e("1d80");r.exports=function(c){return i(l(c))}},fdbc:function(r,s){r.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},fdbf:function(r,s,e){var i=e("4930");r.exports=i&&!Symbol.sham&&typeof Symbol.iterator=="symbol"}}).default})})(so);const Xs=ls(so.exports);class ke extends Error{constructor(t,n){const o=new.target.prototype;super(`${t}: Status code '${n}'`),this.statusCode=n,this.__proto__=o}}class br extends Error{constructor(t="A timeout occurred."){const n=new.target.prototype;super(t),this.__proto__=n}}class cn extends Error{constructor(t="An abort occurred."){const n=new.target.prototype;super(t),this.__proto__=n}}class Ys extends Error{constructor(t,n){const o=new.target.prototype;super(t),this.transport=n,this.errorType="UnsupportedTransportError",this.__proto__=o}}class Js extends Error{constructor(t,n){const o=new.target.prototype;super(t),this.transport=n,this.errorType="DisabledTransportError",this.__proto__=o}}class Qs extends Error{constructor(t,n){const o=new.target.prototype;super(t),this.transport=n,this.errorType="FailedToStartTransportError",this.__proto__=o}}class Zs extends Error{constructor(t){const n=new.target.prototype;super(t),this.errorType="FailedToNegotiateWithServerError",this.__proto__=n}}class qs extends Error{constructor(t,n){const o=new.target.prototype;super(t),this.innerErrors=n,this.__proto__=o}}class So{constructor(t,n,o){this.statusCode=t,this.statusText=n,this.content=o}}class Sr{get(t,n){return this.send({...n,method:"GET",url:t})}post(t,n){return this.send({...n,method:"POST",url:t})}delete(t,n){return this.send({...n,method:"DELETE",url:t})}getCookieString(t){return""}}var D;(function(a){a[a.Trace=0]="Trace",a[a.Debug=1]="Debug",a[a.Information=2]="Information",a[a.Warning=3]="Warning",a[a.Error=4]="Error",a[a.Critical=5]="Critical",a[a.None=6]="None"})(D||(D={}));class un{constructor(){}log(t,n){}}un.instance=new un;const _s="6.0.25";class $t{static isRequired(t,n){if(t==null)throw new Error(`The '${n}' argument is required.`)}static isNotEmpty(t,n){if(!t||t.match(/^\s*$/))throw new Error(`The '${n}' argument should not be empty.`)}static isIn(t,n,o){if(!(t in n))throw new Error(`Unknown ${o} value: ${t}.`)}}class jt{static get isBrowser(){return typeof window=="object"&&typeof window.document=="object"}static get isWebWorker(){return typeof self=="object"&&"importScripts"in self}static get isReactNative(){return typeof window=="object"&&typeof window.document>"u"}static get isNode(){return!this.isBrowser&&!this.isWebWorker&&!this.isReactNative}}function fn(a,t){let n="";return Er(a)?(n=`Binary data of length ${a.byteLength}`,t&&(n+=`. Content: '${tl(a)}'`)):typeof a=="string"&&(n=`String data of length ${a.length}`,t&&(n+=`. Content: '${a}'`)),n}function tl(a){const t=new Uint8Array(a);let n="";return t.forEach(o=>{const r=o<16?"0":"";n+=`0x${r}${o.toString(16)} `}),n.substr(0,n.length-1)}function Er(a){return a&&typeof ArrayBuffer<"u"&&(a instanceof ArrayBuffer||a.constructor&&a.constructor.name==="ArrayBuffer")}async function Eo(a,t,n,o,r,s,e){let i={};if(r){const d=await r();d&&(i={Authorization:`Bearer ${d}`})}const[l,c]=Fe();i[l]=c,a.log(D.Trace,`(${t} transport) sending data. ${fn(s,e.logMessageContent)}.`);const f=Er(s)?"arraybuffer":"text",u=await n.post(o,{content:s,headers:{...i,...e.headers},responseType:f,timeout:e.timeout,withCredentials:e.withCredentials});a.log(D.Trace,`(${t} transport) request complete. Response status: ${u.statusCode}.`)}function el(a){return a===void 0?new kn(D.Information):a===null?un.instance:a.log!==void 0?a:new kn(a)}class nl{constructor(t,n){this._subject=t,this._observer=n}dispose(){const t=this._subject.observers.indexOf(this._observer);t>-1&&this._subject.observers.splice(t,1),this._subject.observers.length===0&&this._subject.cancelCallback&&this._subject.cancelCallback().catch(n=>{})}}class kn{constructor(t){this._minLevel=t,this.out=console}log(t,n){if(t>=this._minLevel){const o=`[${new Date().toISOString()}] ${D[t]}: ${n}`;switch(t){case D.Critical:case D.Error:this.out.error(o);break;case D.Warning:this.out.warn(o);break;case D.Information:this.out.info(o);break;default:this.out.log(o);break}}}}function Fe(){let a="X-SignalR-User-Agent";return jt.isNode&&(a="User-Agent"),[a,rl(_s,ol(),il(),al())]}function rl(a,t,n,o){let r="Microsoft SignalR/";const s=a.split(".");return r+=`${s[0]}.${s[1]}`,r+=` (${a}; `,t&&t!==""?r+=`${t}; `:r+="Unknown OS; ",r+=`${n}`,o?r+=`; ${o}`:r+="; Unknown Runtime Version",r+=")",r}function ol(){if(jt.isNode)switch(process.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return process.platform}else return""}function al(){if(jt.isNode)return process.versions.node}function il(){return jt.isNode?"NodeJS":"Browser"}function Mr(a){return a.stack?a.stack:a.message?a.message:`${a}`}function sl(){if(typeof globalThis<"u")return globalThis;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw new Error("could not find global")}class ll extends Sr{constructor(t){if(super(),this._logger=t,typeof fetch>"u"){const n=typeof __webpack_require__=="function"?__non_webpack_require__:require;this._jar=new(n("tough-cookie")).CookieJar,this._fetchType=n("node-fetch"),this._fetchType=n("fetch-cookie")(this._fetchType,this._jar)}else this._fetchType=fetch.bind(sl());if(typeof AbortController>"u"){const n=typeof __webpack_require__=="function"?__non_webpack_require__:require;this._abortControllerType=n("abort-controller")}else this._abortControllerType=AbortController}async send(t){if(t.abortSignal&&t.abortSignal.aborted)throw new cn;if(!t.method)throw new Error("No method defined.");if(!t.url)throw new Error("No url defined.");const n=new this._abortControllerType;let o;t.abortSignal&&(t.abortSignal.onabort=()=>{n.abort(),o=new cn});let r=null;if(t.timeout){const l=t.timeout;r=setTimeout(()=>{n.abort(),this._logger.log(D.Warning,"Timeout from HTTP request."),o=new br},l)}let s;try{s=await this._fetchType(t.url,{body:t.content,cache:"no-cache",credentials:t.withCredentials===!0?"include":"same-origin",headers:{"Content-Type":"text/plain;charset=UTF-8","X-Requested-With":"XMLHttpRequest",...t.headers},method:t.method,mode:"cors",redirect:"follow",signal:n.signal})}catch(l){throw o||(this._logger.log(D.Warning,`Error from HTTP request. ${l}.`),l)}finally{r&&clearTimeout(r),t.abortSignal&&(t.abortSignal.onabort=null)}if(!s.ok){const l=await Lr(s,"text");throw new ke(l||s.statusText,s.status)}const i=await Lr(s,t.responseType);return new So(s.status,s.statusText,i)}getCookieString(t){let n="";return jt.isNode&&this._jar&&this._jar.getCookies(t,(o,r)=>n=r.join("; ")),n}}function Lr(a,t){let n;switch(t){case"arraybuffer":n=a.arrayBuffer();break;case"text":n=a.text();break;case"blob":case"document":case"json":throw new Error(`${t} is not supported.`);default:n=a.text();break}return n}class cl extends Sr{constructor(t){super(),this._logger=t}send(t){return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new cn):t.method?t.url?new Promise((n,o)=>{const r=new XMLHttpRequest;r.open(t.method,t.url,!0),r.withCredentials=t.withCredentials===void 0?!0:t.withCredentials,r.setRequestHeader("X-Requested-With","XMLHttpRequest"),r.setRequestHeader("Content-Type","text/plain;charset=UTF-8");const s=t.headers;s&&Object.keys(s).forEach(e=>{r.setRequestHeader(e,s[e])}),t.responseType&&(r.responseType=t.responseType),t.abortSignal&&(t.abortSignal.onabort=()=>{r.abort(),o(new cn)}),t.timeout&&(r.timeout=t.timeout),r.onload=()=>{t.abortSignal&&(t.abortSignal.onabort=null),r.status>=200&&r.status<300?n(new So(r.status,r.statusText,r.response||r.responseText)):o(new ke(r.response||r.responseText||r.statusText,r.status))},r.onerror=()=>{this._logger.log(D.Warning,`Error from HTTP request. ${r.status}: ${r.statusText}.`),o(new ke(r.statusText,r.status))},r.ontimeout=()=>{this._logger.log(D.Warning,"Timeout from HTTP request."),o(new br)},r.send(t.content||"")}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class ul extends Sr{constructor(t){if(super(),typeof fetch<"u"||jt.isNode)this._httpClient=new ll(t);else if(typeof XMLHttpRequest<"u")this._httpClient=new cl(t);else throw new Error("No usable HttpClient found.")}send(t){return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new cn):t.method?t.url?this._httpClient.send(t):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(t){return this._httpClient.getCookieString(t)}}class Xt{static write(t){return`${t}${Xt.RecordSeparator}`}static parse(t){if(t[t.length-1]!==Xt.RecordSeparator)throw new Error("Message is incomplete.");const n=t.split(Xt.RecordSeparator);return n.pop(),n}}Xt.RecordSeparatorCode=30;Xt.RecordSeparator=String.fromCharCode(Xt.RecordSeparatorCode);class fl{writeHandshakeRequest(t){return Xt.write(JSON.stringify(t))}parseHandshakeResponse(t){let n,o;if(Er(t)){const i=new Uint8Array(t),l=i.indexOf(Xt.RecordSeparatorCode);if(l===-1)throw new Error("Message is incomplete.");const c=l+1;n=String.fromCharCode.apply(null,Array.prototype.slice.call(i.slice(0,c))),o=i.byteLength>c?i.slice(c).buffer:null}else{const i=t,l=i.indexOf(Xt.RecordSeparator);if(l===-1)throw new Error("Message is incomplete.");const c=l+1;n=i.substring(0,c),o=i.length>c?i.substring(c):null}const r=Xt.parse(n),s=JSON.parse(r[0]);if(s.type)throw new Error("Expected a handshake response from the server.");return[o,s]}}var ft;(function(a){a[a.Invocation=1]="Invocation",a[a.StreamItem=2]="StreamItem",a[a.Completion=3]="Completion",a[a.StreamInvocation=4]="StreamInvocation",a[a.CancelInvocation=5]="CancelInvocation",a[a.Ping=6]="Ping",a[a.Close=7]="Close"})(ft||(ft={}));class dl{constructor(){this.observers=[]}next(t){for(const n of this.observers)n.next(t)}error(t){for(const n of this.observers)n.error&&n.error(t)}complete(){for(const t of this.observers)t.complete&&t.complete()}subscribe(t){return this.observers.push(t),new nl(this,t)}}const hl=30*1e3,gl=15*1e3;var pt;(function(a){a.Disconnected="Disconnected",a.Connecting="Connecting",a.Connected="Connected",a.Disconnecting="Disconnecting",a.Reconnecting="Reconnecting"})(pt||(pt={}));class wr{constructor(t,n,o,r){this._nextKeepAlive=0,this._freezeEventListener=()=>{this._logger.log(D.Warning,"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep")},$t.isRequired(t,"connection"),$t.isRequired(n,"logger"),$t.isRequired(o,"protocol"),this.serverTimeoutInMilliseconds=hl,this.keepAliveIntervalInMilliseconds=gl,this._logger=n,this._protocol=o,this.connection=t,this._reconnectPolicy=r,this._handshakeProtocol=new fl,this.connection.onreceive=s=>this._processIncomingData(s),this.connection.onclose=s=>this._connectionClosed(s),this._callbacks={},this._methods={},this._closedCallbacks=[],this._reconnectingCallbacks=[],this._reconnectedCallbacks=[],this._invocationId=0,this._receivedHandshakeResponse=!1,this._connectionState=pt.Disconnected,this._connectionStarted=!1,this._cachedPingMessage=this._protocol.writeMessage({type:ft.Ping})}static create(t,n,o,r){return new wr(t,n,o,r)}get state(){return this._connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(t){if(this._connectionState!==pt.Disconnected&&this._connectionState!==pt.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!t)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=t}start(){return this._startPromise=this._startWithStateTransitions(),this._startPromise}async _startWithStateTransitions(){if(this._connectionState!==pt.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this._connectionState=pt.Connecting,this._logger.log(D.Debug,"Starting HubConnection.");try{await this._startInternal(),jt.isBrowser&&window.document.addEventListener("freeze",this._freezeEventListener),this._connectionState=pt.Connected,this._connectionStarted=!0,this._logger.log(D.Debug,"HubConnection connected successfully.")}catch(t){return this._connectionState=pt.Disconnected,this._logger.log(D.Debug,`HubConnection failed to start successfully because of error '${t}'.`),Promise.reject(t)}}async _startInternal(){this._stopDuringStartError=void 0,this._receivedHandshakeResponse=!1;const t=new Promise((n,o)=>{this._handshakeResolver=n,this._handshakeRejecter=o});await this.connection.start(this._protocol.transferFormat);try{const n={protocol:this._protocol.name,version:this._protocol.version};if(this._logger.log(D.Debug,"Sending handshake request."),await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(n)),this._logger.log(D.Information,`Using HubProtocol '${this._protocol.name}'.`),this._cleanupTimeout(),this._resetTimeoutPeriod(),this._resetKeepAliveInterval(),await t,this._stopDuringStartError)throw this._stopDuringStartError}catch(n){throw this._logger.log(D.Debug,`Hub handshake failed with error '${n}' during start(). Stopping HubConnection.`),this._cleanupTimeout(),this._cleanupPingTimer(),await this.connection.stop(n),n}}async stop(){const t=this._startPromise;this._stopPromise=this._stopInternal(),await this._stopPromise;try{await t}catch{}}_stopInternal(t){return this._connectionState===pt.Disconnected?(this._logger.log(D.Debug,`Call to HubConnection.stop(${t}) ignored because it is already in the disconnected state.`),Promise.resolve()):this._connectionState===pt.Disconnecting?(this._logger.log(D.Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState=pt.Disconnecting,this._logger.log(D.Debug,"Stopping HubConnection."),this._reconnectDelayHandle?(this._logger.log(D.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this._reconnectDelayHandle),this._reconnectDelayHandle=void 0,this._completeClose(),Promise.resolve()):(this._cleanupTimeout(),this._cleanupPingTimer(),this._stopDuringStartError=t||new Error("The connection was stopped before the hub handshake could complete."),this.connection.stop(t)))}stream(t,...n){const[o,r]=this._replaceStreamingParams(n),s=this._createStreamInvocation(t,n,r);let e;const i=new dl;return i.cancelCallback=()=>{const l=this._createCancelInvocation(s.invocationId);return delete this._callbacks[s.invocationId],e.then(()=>this._sendWithProtocol(l))},this._callbacks[s.invocationId]=(l,c)=>{if(c){i.error(c);return}else l&&(l.type===ft.Completion?l.error?i.error(new Error(l.error)):i.complete():i.next(l.item))},e=this._sendWithProtocol(s).catch(l=>{i.error(l),delete this._callbacks[s.invocationId]}),this._launchStreams(o,e),i}_sendMessage(t){return this._resetKeepAliveInterval(),this.connection.send(t)}_sendWithProtocol(t){return this._sendMessage(this._protocol.writeMessage(t))}send(t,...n){const[o,r]=this._replaceStreamingParams(n),s=this._sendWithProtocol(this._createInvocation(t,n,!0,r));return this._launchStreams(o,s),s}invoke(t,...n){const[o,r]=this._replaceStreamingParams(n),s=this._createInvocation(t,n,!1,r);return new Promise((i,l)=>{this._callbacks[s.invocationId]=(f,u)=>{if(u){l(u);return}else f&&(f.type===ft.Completion?f.error?l(new Error(f.error)):i(f.result):l(new Error(`Unexpected message type: ${f.type}`)))};const c=this._sendWithProtocol(s).catch(f=>{l(f),delete this._callbacks[s.invocationId]});this._launchStreams(o,c)})}on(t,n){!t||!n||(t=t.toLowerCase(),this._methods[t]||(this._methods[t]=[]),this._methods[t].indexOf(n)===-1&&this._methods[t].push(n))}off(t,n){if(!t)return;t=t.toLowerCase();const o=this._methods[t];if(!!o)if(n){const r=o.indexOf(n);r!==-1&&(o.splice(r,1),o.length===0&&delete this._methods[t])}else delete this._methods[t]}onclose(t){t&&this._closedCallbacks.push(t)}onreconnecting(t){t&&this._reconnectingCallbacks.push(t)}onreconnected(t){t&&this._reconnectedCallbacks.push(t)}_processIncomingData(t){if(this._cleanupTimeout(),this._receivedHandshakeResponse||(t=this._processHandshakeResponse(t),this._receivedHandshakeResponse=!0),t){const n=this._protocol.parseMessages(t,this._logger);for(const o of n)switch(o.type){case ft.Invocation:this._invokeClientMethod(o);break;case ft.StreamItem:case ft.Completion:{const r=this._callbacks[o.invocationId];if(r){o.type===ft.Completion&&delete this._callbacks[o.invocationId];try{r(o)}catch(s){this._logger.log(D.Error,`Stream callback threw error: ${Mr(s)}`)}}break}case ft.Ping:break;case ft.Close:{this._logger.log(D.Information,"Close message received from server.");const r=o.error?new Error("Server returned an error on close: "+o.error):void 0;o.allowReconnect===!0?this.connection.stop(r):this._stopPromise=this._stopInternal(r);break}default:this._logger.log(D.Warning,`Invalid message type: ${o.type}.`);break}}this._resetTimeoutPeriod()}_processHandshakeResponse(t){let n,o;try{[o,n]=this._handshakeProtocol.parseHandshakeResponse(t)}catch(r){const s="Error parsing handshake response: "+r;this._logger.log(D.Error,s);const e=new Error(s);throw this._handshakeRejecter(e),e}if(n.error){const r="Server returned handshake error: "+n.error;this._logger.log(D.Error,r);const s=new Error(r);throw this._handshakeRejecter(s),s}else this._logger.log(D.Debug,"Server handshake complete.");return this._handshakeResolver(),o}_resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this._nextKeepAlive=new Date().getTime()+this.keepAliveIntervalInMilliseconds,this._cleanupPingTimer())}_resetTimeoutPeriod(){if((!this.connection.features||!this.connection.features.inherentKeepAlive)&&(this._timeoutHandle=setTimeout(()=>this.serverTimeout(),this.serverTimeoutInMilliseconds),this._pingServerHandle===void 0)){let t=this._nextKeepAlive-new Date().getTime();t<0&&(t=0),this._pingServerHandle=setTimeout(async()=>{if(this._connectionState===pt.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()}},t)}}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}_invokeClientMethod(t){const n=this._methods[t.target.toLowerCase()];if(n){try{n.forEach(o=>o.apply(this,t.arguments))}catch(o){this._logger.log(D.Error,`A callback for the method ${t.target.toLowerCase()} threw error '${o}'.`)}if(t.invocationId){const o="Server requested a response, which is not supported in this version of the client.";this._logger.log(D.Error,o),this._stopPromise=this._stopInternal(new Error(o))}}else this._logger.log(D.Warning,`No client method with the name '${t.target}' found.`)}_connectionClosed(t){this._logger.log(D.Debug,`HubConnection.connectionClosed(${t}) called while in state ${this._connectionState}.`),this._stopDuringStartError=this._stopDuringStartError||t||new Error("The underlying connection was closed before the hub handshake could complete."),this._handshakeResolver&&this._handshakeResolver(),this._cancelCallbacksWithError(t||new Error("Invocation canceled due to the underlying connection being closed.")),this._cleanupTimeout(),this._cleanupPingTimer(),this._connectionState===pt.Disconnecting?this._completeClose(t):this._connectionState===pt.Connected&&this._reconnectPolicy?this._reconnect(t):this._connectionState===pt.Connected&&this._completeClose(t)}_completeClose(t){if(this._connectionStarted){this._connectionState=pt.Disconnected,this._connectionStarted=!1,jt.isBrowser&&window.document.removeEventListener("freeze",this._freezeEventListener);try{this._closedCallbacks.forEach(n=>n.apply(this,[t]))}catch(n){this._logger.log(D.Error,`An onclose callback called with error '${t}' threw error '${n}'.`)}}}async _reconnect(t){const n=Date.now();let o=0,r=t!==void 0?t:new Error("Attempting to reconnect due to a unknown error."),s=this._getNextRetryDelay(o++,0,r);if(s===null){this._logger.log(D.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),this._completeClose(t);return}if(this._connectionState=pt.Reconnecting,t?this._logger.log(D.Information,`Connection reconnecting because of error '${t}'.`):this._logger.log(D.Information,"Connection reconnecting."),this._reconnectingCallbacks.length!==0){try{this._reconnectingCallbacks.forEach(e=>e.apply(this,[t]))}catch(e){this._logger.log(D.Error,`An onreconnecting callback called with error '${t}' threw error '${e}'.`)}if(this._connectionState!==pt.Reconnecting){this._logger.log(D.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.");return}}for(;s!==null;){if(this._logger.log(D.Information,`Reconnect attempt number ${o} will start in ${s} ms.`),await new Promise(e=>{this._reconnectDelayHandle=setTimeout(e,s)}),this._reconnectDelayHandle=void 0,this._connectionState!==pt.Reconnecting){this._logger.log(D.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");return}try{if(await this._startInternal(),this._connectionState=pt.Connected,this._logger.log(D.Information,"HubConnection reconnected successfully."),this._reconnectedCallbacks.length!==0)try{this._reconnectedCallbacks.forEach(e=>e.apply(this,[this.connection.connectionId]))}catch(e){this._logger.log(D.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`)}return}catch(e){if(this._logger.log(D.Information,`Reconnect attempt failed because of error '${e}'.`),this._connectionState!==pt.Reconnecting){this._logger.log(D.Debug,`Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`),this._connectionState===pt.Disconnecting&&this._completeClose();return}r=e instanceof Error?e:new Error(e.toString()),s=this._getNextRetryDelay(o++,Date.now()-n,r)}}this._logger.log(D.Information,`Reconnect retries have been exhausted after ${Date.now()-n} ms and ${o} failed attempts. Connection disconnecting.`),this._completeClose()}_getNextRetryDelay(t,n,o){try{return this._reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:n,previousRetryCount:t,retryReason:o})}catch(r){return this._logger.log(D.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${t}, ${n}) threw error '${r}'.`),null}}_cancelCallbacksWithError(t){const n=this._callbacks;this._callbacks={},Object.keys(n).forEach(o=>{const r=n[o];try{r(null,t)}catch(s){this._logger.log(D.Error,`Stream 'error' callback called with '${t}' threw error: ${Mr(s)}`)}})}_cleanupPingTimer(){this._pingServerHandle&&(clearTimeout(this._pingServerHandle),this._pingServerHandle=void 0)}_cleanupTimeout(){this._timeoutHandle&&clearTimeout(this._timeoutHandle)}_createInvocation(t,n,o,r){if(o)return r.length!==0?{arguments:n,streamIds:r,target:t,type:ft.Invocation}:{arguments:n,target:t,type:ft.Invocation};{const s=this._invocationId;return this._invocationId++,r.length!==0?{arguments:n,invocationId:s.toString(),streamIds:r,target:t,type:ft.Invocation}:{arguments:n,invocationId:s.toString(),target:t,type:ft.Invocation}}}_launchStreams(t,n){if(t.length!==0){n||(n=Promise.resolve());for(const o in t)t[o].subscribe({complete:()=>{n=n.then(()=>this._sendWithProtocol(this._createCompletionMessage(o)))},error:r=>{let s;r instanceof Error?s=r.message:r&&r.toString?s=r.toString():s="Unknown error",n=n.then(()=>this._sendWithProtocol(this._createCompletionMessage(o,s)))},next:r=>{n=n.then(()=>this._sendWithProtocol(this._createStreamItemMessage(o,r)))}})}}_replaceStreamingParams(t){const n=[],o=[];for(let r=0;r<t.length;r++){const s=t[r];if(this._isObservable(s)){const e=this._invocationId;this._invocationId++,n[e]=s,o.push(e.toString()),t.splice(r,1)}}return[n,o]}_isObservable(t){return t&&t.subscribe&&typeof t.subscribe=="function"}_createStreamInvocation(t,n,o){const r=this._invocationId;return this._invocationId++,o.length!==0?{arguments:n,invocationId:r.toString(),streamIds:o,target:t,type:ft.StreamInvocation}:{arguments:n,invocationId:r.toString(),target:t,type:ft.StreamInvocation}}_createCancelInvocation(t){return{invocationId:t,type:ft.CancelInvocation}}_createStreamItemMessage(t,n){return{invocationId:t,item:n,type:ft.StreamItem}}_createCompletionMessage(t,n,o){return n?{error:n,invocationId:t,type:ft.Completion}:{invocationId:t,result:o,type:ft.Completion}}}const pl=[0,2e3,1e4,3e4,null];class kr{constructor(t){this._retryDelays=t!==void 0?[...t,null]:pl}nextRetryDelayInMilliseconds(t){return this._retryDelays[t.previousRetryCount]}}class Ie{}Ie.Authorization="Authorization";Ie.Cookie="Cookie";var Pt;(function(a){a[a.None=0]="None",a[a.WebSockets=1]="WebSockets",a[a.ServerSentEvents=2]="ServerSentEvents",a[a.LongPolling=4]="LongPolling"})(Pt||(Pt={}));var Lt;(function(a){a[a.Text=1]="Text",a[a.Binary=2]="Binary"})(Lt||(Lt={}));class vl{constructor(){this._isAborted=!1,this.onabort=null}abort(){this._isAborted||(this._isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this._isAborted}}class Fr{constructor(t,n,o,r){this._httpClient=t,this._accessTokenFactory=n,this._logger=o,this._pollAbort=new vl,this._options=r,this._running=!1,this.onreceive=null,this.onclose=null}get pollAborted(){return this._pollAbort.aborted}async connect(t,n){if($t.isRequired(t,"url"),$t.isRequired(n,"transferFormat"),$t.isIn(n,Lt,"transferFormat"),this._url=t,this._logger.log(D.Trace,"(LongPolling transport) Connecting."),n===Lt.Binary&&typeof XMLHttpRequest<"u"&&typeof new XMLHttpRequest().responseType!="string")throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[o,r]=Fe(),s={[o]:r,...this._options.headers},e={abortSignal:this._pollAbort.signal,headers:s,timeout:1e5,withCredentials:this._options.withCredentials};n===Lt.Binary&&(e.responseType="arraybuffer");const i=await this._getAccessToken();this._updateHeaderToken(e,i);const l=`${t}&_=${Date.now()}`;this._logger.log(D.Trace,`(LongPolling transport) polling: ${l}.`);const c=await this._httpClient.get(l,e);c.statusCode!==200?(this._logger.log(D.Error,`(LongPolling transport) Unexpected response code: ${c.statusCode}.`),this._closeError=new ke(c.statusText||"",c.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,e)}async _getAccessToken(){return this._accessTokenFactory?await this._accessTokenFactory():null}_updateHeaderToken(t,n){if(t.headers||(t.headers={}),n){t.headers[Ie.Authorization]=`Bearer ${n}`;return}t.headers[Ie.Authorization]&&delete t.headers[Ie.Authorization]}async _poll(t,n){try{for(;this._running;){const o=await this._getAccessToken();this._updateHeaderToken(n,o);try{const r=`${t}&_=${Date.now()}`;this._logger.log(D.Trace,`(LongPolling transport) polling: ${r}.`);const s=await this._httpClient.get(r,n);s.statusCode===204?(this._logger.log(D.Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):s.statusCode!==200?(this._logger.log(D.Error,`(LongPolling transport) Unexpected response code: ${s.statusCode}.`),this._closeError=new ke(s.statusText||"",s.statusCode),this._running=!1):s.content?(this._logger.log(D.Trace,`(LongPolling transport) data received. ${fn(s.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(s.content)):this._logger.log(D.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(r){this._running?r instanceof br?this._logger.log(D.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=r,this._running=!1):this._logger.log(D.Trace,`(LongPolling transport) Poll errored after shutdown: ${r.message}`)}}}finally{this._logger.log(D.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}}async send(t){return this._running?Eo(this._logger,"LongPolling",this._httpClient,this._url,this._accessTokenFactory,t,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this._logger.log(D.Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{await this._receiving,this._logger.log(D.Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const t={},[n,o]=Fe();t[n]=o;const r={headers:{...t,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials},s=await this._getAccessToken();this._updateHeaderToken(r,s),await this._httpClient.delete(this._url,r),this._logger.log(D.Trace,"(LongPolling transport) DELETE request sent.")}finally{this._logger.log(D.Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}}_raiseOnClose(){if(this.onclose){let t="(LongPolling transport) Firing onclose event.";this._closeError&&(t+=" Error: "+this._closeError),this._logger.log(D.Trace,t),this.onclose(this._closeError)}}}class ml{constructor(t,n,o,r){this._httpClient=t,this._accessTokenFactory=n,this._logger=o,this._options=r,this.onreceive=null,this.onclose=null}async connect(t,n){if($t.isRequired(t,"url"),$t.isRequired(n,"transferFormat"),$t.isIn(n,Lt,"transferFormat"),this._logger.log(D.Trace,"(SSE transport) Connecting."),this._url=t,this._accessTokenFactory){const o=await this._accessTokenFactory();o&&(t+=(t.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(o)}`)}return new Promise((o,r)=>{let s=!1;if(n!==Lt.Text){r(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"));return}let e;if(jt.isBrowser||jt.isWebWorker)e=new this._options.EventSource(t,{withCredentials:this._options.withCredentials});else{const i=this._httpClient.getCookieString(t),l={};l.Cookie=i;const[c,f]=Fe();l[c]=f,e=new this._options.EventSource(t,{withCredentials:this._options.withCredentials,headers:{...l,...this._options.headers}})}try{e.onmessage=i=>{if(this.onreceive)try{this._logger.log(D.Trace,`(SSE transport) data received. ${fn(i.data,this._options.logMessageContent)}.`),this.onreceive(i.data)}catch(l){this._close(l);return}},e.onerror=i=>{s?this._close():r(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},e.onopen=()=>{this._logger.log(D.Information,`SSE connected to ${this._url}`),this._eventSource=e,s=!0,o()}}catch(i){r(i);return}})}async send(t){return this._eventSource?Eo(this._logger,"SSE",this._httpClient,this._url,this._accessTokenFactory,t,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(t){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(t))}}class yl{constructor(t,n,o,r,s,e){this._logger=o,this._accessTokenFactory=n,this._logMessageContent=r,this._webSocketConstructor=s,this._httpClient=t,this.onreceive=null,this.onclose=null,this._headers=e}async connect(t,n){if($t.isRequired(t,"url"),$t.isRequired(n,"transferFormat"),$t.isIn(n,Lt,"transferFormat"),this._logger.log(D.Trace,"(WebSockets transport) Connecting."),this._accessTokenFactory){const o=await this._accessTokenFactory();o&&(t+=(t.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(o)}`)}return new Promise((o,r)=>{t=t.replace(/^http/,"ws");let s;const e=this._httpClient.getCookieString(t);let i=!1;if(jt.isNode){const l={},[c,f]=Fe();l[c]=f,e&&(l[Ie.Cookie]=`${e}`),s=new this._webSocketConstructor(t,void 0,{headers:{...l,...this._headers}})}s||(s=new this._webSocketConstructor(t)),n===Lt.Binary&&(s.binaryType="arraybuffer"),s.onopen=l=>{this._logger.log(D.Information,`WebSocket connected to ${t}.`),this._webSocket=s,i=!0,o()},s.onerror=l=>{let c=null;typeof ErrorEvent<"u"&&l instanceof ErrorEvent?c=l.error:c="There was an error with the transport",this._logger.log(D.Information,`(WebSockets transport) ${c}.`)},s.onmessage=l=>{if(this._logger.log(D.Trace,`(WebSockets transport) data received. ${fn(l.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(l.data)}catch(c){this._close(c);return}},s.onclose=l=>{if(i)this._close(l);else{let c=null;typeof ErrorEvent<"u"&&l instanceof ErrorEvent?c=l.error:c="WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",r(new Error(c))}}})}send(t){return this._webSocket&&this._webSocket.readyState===this._webSocketConstructor.OPEN?(this._logger.log(D.Trace,`(WebSockets transport) sending data. ${fn(t,this._logMessageContent)}.`),this._webSocket.send(t),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(t){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(D.Trace,"(WebSockets transport) socket closed."),this.onclose&&(this._isCloseEvent(t)&&(t.wasClean===!1||t.code!==1e3)?this.onclose(new Error(`WebSocket closed with status code: ${t.code} (${t.reason||"no reason given"}).`)):t instanceof Error?this.onclose(t):this.onclose())}_isCloseEvent(t){return t&&typeof t.wasClean=="boolean"&&typeof t.code=="number"}}const Ur=100;class bl{constructor(t,n={}){if(this._stopPromiseResolver=()=>{},this.features={},this._negotiateVersion=1,$t.isRequired(t,"url"),this._logger=el(n.logger),this.baseUrl=this._resolveUrl(t),n=n||{},n.logMessageContent=n.logMessageContent===void 0?!1:n.logMessageContent,typeof n.withCredentials=="boolean"||n.withCredentials===void 0)n.withCredentials=n.withCredentials===void 0?!0:n.withCredentials;else throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");n.timeout=n.timeout===void 0?100*1e3:n.timeout;let o=null,r=null;if(jt.isNode&&typeof require<"u"){const s=typeof __webpack_require__=="function"?__non_webpack_require__:require;o=s("ws"),r=s("eventsource")}!jt.isNode&&typeof WebSocket<"u"&&!n.WebSocket?n.WebSocket=WebSocket:jt.isNode&&!n.WebSocket&&o&&(n.WebSocket=o),!jt.isNode&&typeof EventSource<"u"&&!n.EventSource?n.EventSource=EventSource:jt.isNode&&!n.EventSource&&typeof r<"u"&&(n.EventSource=r),this._httpClient=n.httpClient||new ul(this._logger),this._connectionState="Disconnected",this._connectionStarted=!1,this._options=n,this.onreceive=null,this.onclose=null}async start(t){if(t=t||Lt.Binary,$t.isIn(t,Lt,"transferFormat"),this._logger.log(D.Debug,`Starting connection with transfer format '${Lt[t]}'.`),this._connectionState!=="Disconnected")return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this._connectionState="Connecting",this._startInternalPromise=this._startInternal(t),await this._startInternalPromise,this._connectionState==="Disconnecting"){const n="Failed to start the HttpConnection before stop() was called.";return this._logger.log(D.Error,n),await this._stopPromise,Promise.reject(new Error(n))}else if(this._connectionState!=="Connected"){const n="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this._logger.log(D.Error,n),Promise.reject(new Error(n))}this._connectionStarted=!0}send(t){return this._connectionState!=="Connected"?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this._sendQueue||(this._sendQueue=new xr(this.transport)),this._sendQueue.send(t))}async stop(t){if(this._connectionState==="Disconnected")return this._logger.log(D.Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnected state.`),Promise.resolve();if(this._connectionState==="Disconnecting")return this._logger.log(D.Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnecting state.`),this._stopPromise;this._connectionState="Disconnecting",this._stopPromise=new Promise(n=>{this._stopPromiseResolver=n}),await this._stopInternal(t),await this._stopPromise}async _stopInternal(t){this._stopError=t;try{await this._startInternalPromise}catch{}if(this.transport){try{await this.transport.stop()}catch(n){this._logger.log(D.Error,`HttpConnection.transport.stop() threw error '${n}'.`),this._stopConnection()}this.transport=void 0}else this._logger.log(D.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")}async _startInternal(t){let n=this.baseUrl;this._accessTokenFactory=this._options.accessTokenFactory;try{if(this._options.skipNegotiation)if(this._options.transport===Pt.WebSockets)this.transport=this._constructTransport(Pt.WebSockets),await this._startTransport(n,t);else throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");else{let o=null,r=0;do{if(o=await this._getNegotiationResponse(n),this._connectionState==="Disconnecting"||this._connectionState==="Disconnected")throw new Error("The connection was stopped during negotiation.");if(o.error)throw new Error(o.error);if(o.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(o.url&&(n=o.url),o.accessToken){const s=o.accessToken;this._accessTokenFactory=()=>s}r++}while(o.url&&r<Ur);if(r===Ur&&o.url)throw new Error("Negotiate redirection limit exceeded.");await this._createTransport(n,this._options.transport,o,t)}this.transport instanceof Fr&&(this.features.inherentKeepAlive=!0),this._connectionState==="Connecting"&&(this._logger.log(D.Debug,"The HttpConnection connected successfully."),this._connectionState="Connected")}catch(o){return this._logger.log(D.Error,"Failed to start the connection: "+o),this._connectionState="Disconnected",this.transport=void 0,this._stopPromiseResolver(),Promise.reject(o)}}async _getNegotiationResponse(t){const n={};if(this._accessTokenFactory){const e=await this._accessTokenFactory();e&&(n[Ie.Authorization]=`Bearer ${e}`)}const[o,r]=Fe();n[o]=r;const s=this._resolveNegotiateUrl(t);this._logger.log(D.Debug,`Sending negotiation request: ${s}.`);try{const e=await this._httpClient.post(s,{content:"",headers:{...n,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials});if(e.statusCode!==200)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${e.statusCode}'`));const i=JSON.parse(e.content);return(!i.negotiateVersion||i.negotiateVersion<1)&&(i.connectionToken=i.connectionId),i}catch(e){let i="Failed to complete negotiation with the server: "+e;return e instanceof ke&&e.statusCode===404&&(i=i+" Either this is not a SignalR endpoint or there is a proxy blocking the connection."),this._logger.log(D.Error,i),Promise.reject(new Zs(i))}}_createConnectUrl(t,n){return n?t+(t.indexOf("?")===-1?"?":"&")+`id=${n}`:t}async _createTransport(t,n,o,r){let s=this._createConnectUrl(t,o.connectionToken);if(this._isITransport(n)){this._logger.log(D.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=n,await this._startTransport(s,r),this.connectionId=o.connectionId;return}const e=[],i=o.availableTransports||[];let l=o;for(const c of i){const f=this._resolveTransportOrError(c,n,r);if(f instanceof Error)e.push(`${c.transport} failed:`),e.push(f);else if(this._isITransport(f)){if(this.transport=f,!l){try{l=await this._getNegotiationResponse(t)}catch(u){return Promise.reject(u)}s=this._createConnectUrl(t,l.connectionToken)}try{await this._startTransport(s,r),this.connectionId=l.connectionId;return}catch(u){if(this._logger.log(D.Error,`Failed to start the transport '${c.transport}': ${u}`),l=void 0,e.push(new Qs(`${c.transport} failed: ${u}`,Pt[c.transport])),this._connectionState!=="Connecting"){const d="Failed to select transport before stop() was called.";return this._logger.log(D.Debug,d),Promise.reject(new Error(d))}}}}return e.length>0?Promise.reject(new qs(`Unable to connect to the server with any of the available transports. ${e.join(" ")}`,e)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))}_constructTransport(t){switch(t){case Pt.WebSockets:if(!this._options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new yl(this._httpClient,this._accessTokenFactory,this._logger,this._options.logMessageContent,this._options.WebSocket,this._options.headers||{});case Pt.ServerSentEvents:if(!this._options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new ml(this._httpClient,this._accessTokenFactory,this._logger,this._options);case Pt.LongPolling:return new Fr(this._httpClient,this._accessTokenFactory,this._logger,this._options);default:throw new Error(`Unknown transport: ${t}.`)}}_startTransport(t,n){return this.transport.onreceive=this.onreceive,this.transport.onclose=o=>this._stopConnection(o),this.transport.connect(t,n)}_resolveTransportOrError(t,n,o){const r=Pt[t.transport];if(r==null)return this._logger.log(D.Debug,`Skipping transport '${t.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${t.transport}' because it is not supported by this client.`);if(Sl(n,r))if(t.transferFormats.map(e=>Lt[e]).indexOf(o)>=0){if(r===Pt.WebSockets&&!this._options.WebSocket||r===Pt.ServerSentEvents&&!this._options.EventSource)return this._logger.log(D.Debug,`Skipping transport '${Pt[r]}' because it is not supported in your environment.'`),new Ys(`'${Pt[r]}' is not supported in your environment.`,r);this._logger.log(D.Debug,`Selecting transport '${Pt[r]}'.`);try{return this._constructTransport(r)}catch(e){return e}}else return this._logger.log(D.Debug,`Skipping transport '${Pt[r]}' because it does not support the requested transfer format '${Lt[o]}'.`),new Error(`'${Pt[r]}' does not support ${Lt[o]}.`);else return this._logger.log(D.Debug,`Skipping transport '${Pt[r]}' because it was disabled by the client.`),new Js(`'${Pt[r]}' is disabled by the client.`,r)}_isITransport(t){return t&&typeof t=="object"&&"connect"in t}_stopConnection(t){if(this._logger.log(D.Debug,`HttpConnection.stopConnection(${t}) called while in state ${this._connectionState}.`),this.transport=void 0,t=this._stopError||t,this._stopError=void 0,this._connectionState==="Disconnected"){this._logger.log(D.Debug,`Call to HttpConnection.stopConnection(${t}) was ignored because the connection is already in the disconnected state.`);return}if(this._connectionState==="Connecting")throw this._logger.log(D.Warning,`Call to HttpConnection.stopConnection(${t}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${t}) was called while the connection is still in the connecting state.`);if(this._connectionState==="Disconnecting"&&this._stopPromiseResolver(),t?this._logger.log(D.Error,`Connection disconnected with error '${t}'.`):this._logger.log(D.Information,"Connection disconnected."),this._sendQueue&&(this._sendQueue.stop().catch(n=>{this._logger.log(D.Error,`TransportSendQueue.stop() threw error '${n}'.`)}),this._sendQueue=void 0),this.connectionId=void 0,this._connectionState="Disconnected",this._connectionStarted){this._connectionStarted=!1;try{this.onclose&&this.onclose(t)}catch(n){this._logger.log(D.Error,`HttpConnection.onclose(${t}) threw error '${n}'.`)}}}_resolveUrl(t){if(t.lastIndexOf("https://",0)===0||t.lastIndexOf("http://",0)===0)return t;if(!jt.isBrowser)throw new Error(`Cannot resolve '${t}'.`);const n=window.document.createElement("a");return n.href=t,this._logger.log(D.Information,`Normalizing '${t}' to '${n.href}'.`),n.href}_resolveNegotiateUrl(t){const n=t.indexOf("?");let o=t.substring(0,n===-1?t.length:n);return o[o.length-1]!=="/"&&(o+="/"),o+="negotiate",o+=n===-1?"":t.substring(n),o.indexOf("negotiateVersion")===-1&&(o+=n===-1?"?":"&",o+="negotiateVersion="+this._negotiateVersion),o}}function Sl(a,t){return!a||(t&a)!==0}class xr{constructor(t){this._transport=t,this._buffer=[],this._executing=!0,this._sendBufferedData=new Cn,this._transportResult=new Cn,this._sendLoopPromise=this._sendLoop()}send(t){return this._bufferData(t),this._transportResult||(this._transportResult=new Cn),this._transportResult.promise}stop(){return this._executing=!1,this._sendBufferedData.resolve(),this._sendLoopPromise}_bufferData(t){if(this._buffer.length&&typeof this._buffer[0]!=typeof t)throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof t}`);this._buffer.push(t),this._sendBufferedData.resolve()}async _sendLoop(){for(;;){if(await this._sendBufferedData.promise,!this._executing){this._transportResult&&this._transportResult.reject("Connection stopped.");break}this._sendBufferedData=new Cn;const t=this._transportResult;this._transportResult=void 0;const n=typeof this._buffer[0]=="string"?this._buffer.join(""):xr._concatBuffers(this._buffer);this._buffer.length=0;try{await this._transport.send(n),t.resolve()}catch(o){t.reject(o)}}}static _concatBuffers(t){const n=t.map(s=>s.byteLength).reduce((s,e)=>s+e),o=new Uint8Array(n);let r=0;for(const s of t)o.set(new Uint8Array(s),r),r+=s.byteLength;return o.buffer}}class Cn{constructor(){this.promise=new Promise((t,n)=>[this._resolver,this._rejecter]=[t,n])}resolve(){this._resolver()}reject(t){this._rejecter(t)}}const El="json";class wl{constructor(){this.name=El,this.version=1,this.transferFormat=Lt.Text}parseMessages(t,n){if(typeof t!="string")throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!t)return[];n===null&&(n=un.instance);const o=Xt.parse(t),r=[];for(const s of o){const e=JSON.parse(s);if(typeof e.type!="number")throw new Error("Invalid payload.");switch(e.type){case ft.Invocation:this._isInvocationMessage(e);break;case ft.StreamItem:this._isStreamItemMessage(e);break;case ft.Completion:this._isCompletionMessage(e);break;case ft.Ping:break;case ft.Close:break;default:n.log(D.Information,"Unknown message type '"+e.type+"' ignored.");continue}r.push(e)}return r}writeMessage(t){return Xt.write(JSON.stringify(t))}_isInvocationMessage(t){this._assertNotEmptyString(t.target,"Invalid payload for Invocation message."),t.invocationId!==void 0&&this._assertNotEmptyString(t.invocationId,"Invalid payload for Invocation message.")}_isStreamItemMessage(t){if(this._assertNotEmptyString(t.invocationId,"Invalid payload for StreamItem message."),t.item===void 0)throw new Error("Invalid payload for StreamItem message.")}_isCompletionMessage(t){if(t.result&&t.error)throw new Error("Invalid payload for Completion message.");!t.result&&t.error&&this._assertNotEmptyString(t.error,"Invalid payload for Completion message."),this._assertNotEmptyString(t.invocationId,"Invalid payload for Completion message.")}_assertNotEmptyString(t,n){if(typeof t!="string"||t==="")throw new Error(n)}}const xl={trace:D.Trace,debug:D.Debug,info:D.Information,information:D.Information,warn:D.Warning,warning:D.Warning,error:D.Error,critical:D.Critical,none:D.None};function Tl(a){const t=xl[a.toLowerCase()];if(typeof t<"u")return t;throw new Error(`Unknown log level: ${a}`)}class Cl{configureLogging(t){if($t.isRequired(t,"logging"),Il(t))this.logger=t;else if(typeof t=="string"){const n=Tl(t);this.logger=new kn(n)}else this.logger=new kn(t);return this}withUrl(t,n){return $t.isRequired(t,"url"),$t.isNotEmpty(t,"url"),this.url=t,typeof n=="object"?this.httpConnectionOptions={...this.httpConnectionOptions,...n}:this.httpConnectionOptions={...this.httpConnectionOptions,transport:n},this}withHubProtocol(t){return $t.isRequired(t,"protocol"),this.protocol=t,this}withAutomaticReconnect(t){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return t?Array.isArray(t)?this.reconnectPolicy=new kr(t):this.reconnectPolicy=t:this.reconnectPolicy=new kr,this}build(){const t=this.httpConnectionOptions||{};if(t.logger===void 0&&(t.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const n=new bl(this.url,t);return wr.create(n,this.logger||un.instance,this.protocol||new wl,this.reconnectPolicy)}}function Il(a){return a.log!==void 0}const Ol={key:0,id:"confirmModal",class:"modal",tabindex:"-1",role:"dialog",style:{display:"flex"},"aria-hidden":"true"},Dl={class:"modal-dialog",role:"document"},Pl={class:"modal-content"},$l={class:"modal-body"},Rl=["innerHTML"],Al=gn({__name:"ConfirmDialog",setup(a,{expose:t}){let n=null,o=lt(""),r,s,e=lt(!1);function i(f,u,d,g){r=d,s=g,n=f,o.value=u,e.value=!0}t({Show:i});function l(){e.value=!1,r(n)}function c(){e.value=!1,s(n)}return(f,u)=>B(e)?(wt(),Et("div",Ol,[F("div",Dl,[F("div",Pl,[F("div",{class:"modal-header"},[F("button",{type:"button",class:"close","data-dismiss":"modal","aria-label":"Close",onClick:c},u[0]||(u[0]=[F("span",{"aria-hidden":"true"},"\xD7",-1)])),u[1]||(u[1]=F("h4",{class:"modal-title"},"Confirmation",-1))]),F("div",$l,[F("p",null,[F("span",{innerHTML:B(o)},null,8,Rl)])]),F("div",{class:"modal-footer"},[F("button",{type:"button",class:"btn btn-primary",onClick:l},"Yes"),F("button",{type:"button",class:"btn btn-default",onClick:c},"No")])])])])):te("",!0)}}),Nl={class:"form-group"},jl={class:"list-group"},Ml=["onUpdate:modelValue"],Ll=["onClick"],kl=gn({__name:"SubTaskList",props:{task:hr},setup(a){const t=a;ye(()=>t.task,()=>{o.value=t.task.subTaskSet});let n=lt(""),o=lt(t.task.subTaskSet);function r(){var i;let e=new ns({subTaskID:0,title:n.value,created:new Date,done:!1,taskID:0});(i=o.value)==null||i.push(e),console.log("SubTaskList.createSubTask",e),n.value=""}function s(e){console.log("SubTaskList.removeSubTask",e);let i=t.task.subTaskSet.indexOf(e);t.task.subTaskSet.splice(i,1)}return(e,i)=>(wt(),Et("div",Nl,[i[2]||(i[2]=F("label",null,"Subtasks",-1)),oe(F("input",{type:"text",class:"form-control",name:"newSubTaskTitle","onUpdate:modelValue":i[0]||(i[0]=l=>an(n)?n.value=l:n=l),onChange:i[1]||(i[1]=l=>r()),placeholder:"new Subtask..."},null,544),[[ve,B(n)]]),F("ul",jl,[(wt(!0),Et(Me,null,ln(B(o),l=>(wt(),Et("li",{class:"list-group-item",key:l.subTaskID},[oe(F("input",{type:"checkbox","onUpdate:modelValue":c=>l.done=c,class:"MLcheckbox",style:{"margin-right":"5px"}},null,8,Ml),[[ro,l.done]]),F("span",{style:Zr({"text-decoration":l.done?"line-through":"none"})},Bt(l.title),5),F("a",{onClick:c=>s(l),title:"Remove Subtask (will be done without confirmation)",class:"close"},"\xD7",8,Ll)]))),128))])]))}});function wo(){const a=lt(!1),t=sn("MiracleListProxy"),n=gr();Hn(()=>{a.value=typeof window.HybridWebView<"u",console.log("HybridWebView available:",a.value),a.value&&(window.removeEventListener("HybridWebViewMessageReceived",c),window.addEventListener("HybridWebViewMessageReceived",c),console.log("HybridWebView message listener registered")),window.Export=r,window.ExportCurrentCategory=s}),dr(()=>{window.removeEventListener("HybridWebViewMessageReceived",c)});const o=async u=>{if(!a.value){if(typeof navigator.share=="function")try{return await navigator.share({title:`Task: ${u.title}`,text:`Task: ${u.title}
Due: ${u.due?new Date(u.due).toLocaleDateString():"No due date"}`}),{success:!0,message:"Shared via Web Share API"}}catch(d){d.name!=="AbortError"&&console.error("Web Share API error:",d)}return{success:!1,message:"Sharing unavailable in this browser"}}try{return await f("ShareCurrentTask",u)||{success:!1,message:"No response from native side"}}catch(d){return{success:!1,message:String(d)}}},r=async()=>{try{if(!dt.Authenticated)return{success:!1,message:"Not authenticated"};const u=await t.categorySet(dt.Token);if(!u||u.length===0)return{success:!1,message:"No categories found"};const d=[];for(const g of u){const h=await l(g);h&&d.push(h)}return{success:!0,message:"Data exported successfully",data:d}}catch(u){return{success:!1,message:`Export failed: ${u}`}}},s=async()=>{try{if(!dt.Authenticated)return{success:!1,message:"Not authenticated"};const u=await t.categorySet(dt.Token);if(!u||u.length===0)return{success:!1,message:"No categories found"};const d=dt.CurrentCategoryID.value;let g;if(d&&(g=u.find(p=>p.categoryID===d)),g||(g=u[0],console.log("No current category found, using first category as fallback")),!(g!=null&&g.categoryID))return{success:!1,message:"Current category not found"};const h=await l(g);return h?{success:!0,message:`Category "${g.name}" exported`,data:h}:{success:!1,message:"Failed to process category data"}}catch(u){return{success:!1,message:`Export failed: ${u}`}}},e=(u,d)=>({subTaskID:u.subTaskID||0,title:u.title||"",done:u.done||!1,created:u.created||new Date().toISOString(),taskID:d}),i=(u,d)=>({taskID:u.taskID||0,title:u.title||"",created:u.created||new Date().toISOString(),due:u.due||null,importance:u.importance||0,note:u.note||"",done:u.done||!1,effort:u.effort||0,order:u.order||0,dueInDays:u.dueInDays||0,categoryID:d,subTaskSet:(u.subTaskSet||[]).map(g=>e(g,u.taskID||0))}),l=async u=>{if(!u.categoryID)return null;const d=await t.taskSet(u.categoryID,dt.Token);return{categoryID:u.categoryID,name:u.name||"",tasks:d.map(g=>i(g,u.categoryID))}},c=u=>{var g;if(!((g=u==null?void 0:u.detail)!=null&&g.message)||!a.value)return;const d=u.detail.message;console.log("Message from native:",d),n.info(`Message from MAUI: ${d}`,{timeout:5e3,position:rs.TOP_RIGHT})},f=async(u,...d)=>{if(!a.value)return null;try{return await window.HybridWebView.InvokeDotNet(u,d)}catch(g){return console.error(`Error calling .NET method ${u}:`,g),null}};return{isAvailable:a,callDotNetMethod:f,shareTask:o,isRunningInMaui:a,sendMessage:u=>{if(a.value&&window.HybridWebView)try{return window.HybridWebView.SendRawMessage(u),console.log("Sent message to HybridWebView:",u),!0}catch(d){return console.error("Error sending message to HybridWebView:",d),!1}return console.warn("HybridWebView not available, message not sent:",u),!1}}}function Hr(a,t){var n=Object.keys(a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(a);t&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(a,r).enumerable})),n.push.apply(n,o)}return n}function he(a){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?Hr(Object(n),!0).forEach(function(o){Fl(a,o,n[o])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(n)):Hr(Object(n)).forEach(function(o){Object.defineProperty(a,o,Object.getOwnPropertyDescriptor(n,o))})}return a}function Fl(a,t,n){return t in a?Object.defineProperty(a,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):a[t]=n,a}function Wr(a){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];return Object.keys(a).reduce((n,o)=>(t.includes(o)||(n[o]=B(a[o])),n),{})}function Fn(a){return typeof a=="function"}function Ul(a){return Jr(a)||Qr(a)}function xo(a,t,n){let o=a;const r=t.split(".");for(let s=0;s<r.length;s++){if(!o[r[s]])return n;o=o[r[s]]}return o}function nr(a,t,n){return st(()=>a.some(o=>xo(t,o,{[n]:!1})[n]))}function Vr(a,t,n){return st(()=>a.reduce((o,r)=>{const s=xo(t,r,{[n]:!1})[n]||[];return o.concat(s)},[]))}function To(a,t,n,o){return a.call(o,B(t),B(n),o)}function Co(a){return a.$valid!==void 0?!a.$valid:!a}function Hl(a,t,n,o,r,s,e){let{$lazy:i,$rewardEarly:l}=r,c=arguments.length>7&&arguments[7]!==void 0?arguments[7]:[],f=arguments.length>8?arguments[8]:void 0,u=arguments.length>9?arguments[9]:void 0,d=arguments.length>10?arguments[10]:void 0;const g=lt(!!o.value),h=lt(0);n.value=!1;const p=ye([t,o].concat(c,d),()=>{if(i&&!o.value||l&&!u.value&&!n.value)return;let v;try{v=To(a,t,f,e)}catch(m){v=Promise.reject(m)}h.value++,n.value=!!h.value,g.value=!1,Promise.resolve(v).then(m=>{h.value--,n.value=!!h.value,s.value=m,g.value=Co(m)}).catch(m=>{h.value--,n.value=!!h.value,s.value=m,g.value=!0})},{immediate:!0,deep:typeof t=="object"});return{$invalid:g,$unwatch:p}}function Wl(a,t,n,o,r,s,e,i){let{$lazy:l,$rewardEarly:c}=o;const f=()=>({}),u=st(()=>{if(l&&!n.value||c&&!i.value)return!1;let d=!0;try{const g=To(a,t,e,s);r.value=g,d=Co(g)}catch(g){r.value=g}return d});return{$unwatch:f,$invalid:u}}function Vl(a,t,n,o,r,s,e,i,l,c,f){const u=lt(!1),d=a.$params||{},g=lt(null);let h,p;a.$async?{$invalid:h,$unwatch:p}=Hl(a.$validator,t,u,n,o,g,r,a.$watchTargets,l,c,f):{$invalid:h,$unwatch:p}=Wl(a.$validator,t,n,o,g,r,l,c);const v=a.$message;return{$message:Fn(v)?st(()=>v(Wr({$pending:u,$invalid:h,$params:Wr(d),$model:t,$response:g,$validator:s,$propertyPath:i,$property:e}))):v||"",$params:d,$pending:u,$invalid:h,$response:g,$unwatch:p}}function Bl(){let a=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const t=B(a),n=Object.keys(t),o={},r={},s={};let e=null;return n.forEach(i=>{const l=t[i];switch(!0){case Fn(l.$validator):o[i]=l;break;case Fn(l):o[i]={$validator:l};break;case i==="$validationGroups":e=l;break;case i.startsWith("$"):s[i]=l;break;default:r[i]=l}}),{rules:o,nestedValidators:r,config:s,validationGroups:e}}const Gl="__root";function Kl(a,t,n,o,r,s,e,i,l){const c=Object.keys(a),f=o.get(r,a),u=lt(!1),d=lt(!1),g=lt(0);if(f){if(!f.$partial)return f;f.$unwatch(),u.value=f.$dirty.value}const h={$dirty:u,$path:r,$touch:()=>{u.value||(u.value=!0)},$reset:()=>{u.value&&(u.value=!1)},$commit:()=>{}};return c.length?(c.forEach(p=>{h[p]=Vl(a[p],t,h.$dirty,s,e,p,n,r,l,d,g)}),h.$externalResults=st(()=>i.value?[].concat(i.value).map((p,v)=>({$propertyPath:r,$property:n,$validator:"$externalResults",$uid:`${r}-externalResult-${v}`,$message:p,$params:{},$response:null,$pending:!1})):[]),h.$invalid=st(()=>{const p=c.some(v=>B(h[v].$invalid));return d.value=p,!!h.$externalResults.value.length||p}),h.$pending=st(()=>c.some(p=>B(h[p].$pending))),h.$error=st(()=>h.$dirty.value?h.$pending.value||h.$invalid.value:!1),h.$silentErrors=st(()=>c.filter(p=>B(h[p].$invalid)).map(p=>{const v=h[p];return hn({$propertyPath:r,$property:n,$validator:p,$uid:`${r}-${p}`,$message:v.$message,$params:v.$params,$response:v.$response,$pending:v.$pending})}).concat(h.$externalResults.value)),h.$errors=st(()=>h.$dirty.value?h.$silentErrors.value:[]),h.$unwatch=()=>c.forEach(p=>{h[p].$unwatch()}),h.$commit=()=>{d.value=!0,g.value=Date.now()},o.set(r,a,h),h):(f&&o.set(r,a,h),h)}function zl(a,t,n,o,r,s,e){const i=Object.keys(a);return i.length?i.reduce((l,c)=>(l[c]=ur({validations:a[c],state:t,key:c,parentKey:n,resultsCache:o,globalConfig:r,instance:s,externalResults:e}),l),{}):{}}function Xl(a,t,n){const o=st(()=>[t,n].filter(h=>h).reduce((h,p)=>h.concat(Object.values(B(p))),[])),r=st({get(){return a.$dirty.value||(o.value.length?o.value.every(h=>h.$dirty):!1)},set(h){a.$dirty.value=h}}),s=st(()=>{const h=B(a.$silentErrors)||[],p=o.value.filter(v=>(B(v).$silentErrors||[]).length).reduce((v,m)=>v.concat(...m.$silentErrors),[]);return h.concat(p)}),e=st(()=>{const h=B(a.$errors)||[],p=o.value.filter(v=>(B(v).$errors||[]).length).reduce((v,m)=>v.concat(...m.$errors),[]);return h.concat(p)}),i=st(()=>o.value.some(h=>h.$invalid)||B(a.$invalid)||!1),l=st(()=>o.value.some(h=>B(h.$pending))||B(a.$pending)||!1),c=st(()=>o.value.some(h=>h.$dirty)||o.value.some(h=>h.$anyDirty)||r.value),f=st(()=>r.value?l.value||i.value:!1),u=()=>{a.$touch(),o.value.forEach(h=>{h.$touch()})},d=()=>{a.$commit(),o.value.forEach(h=>{h.$commit()})},g=()=>{a.$reset(),o.value.forEach(h=>{h.$reset()})};return o.value.length&&o.value.every(h=>h.$dirty)&&u(),{$dirty:r,$errors:e,$invalid:i,$anyDirty:c,$error:f,$pending:l,$touch:u,$reset:g,$silentErrors:s,$commit:d}}function ur(a){let{validations:t,state:n,key:o,parentKey:r,childResults:s,resultsCache:e,globalConfig:i={},instance:l,externalResults:c}=a;const f=r?`${r}.${o}`:o,{rules:u,nestedValidators:d,config:g,validationGroups:h}=Bl(t),p=he(he({},i),g),v=o?st(()=>{const q=B(n);return q?B(q[o]):void 0}):n,m=he({},B(c)||{}),y=st(()=>{const q=B(c);return o?q?B(q[o]):void 0:q}),O=Kl(u,v,o,e,f,p,l,y,n),w=zl(d,v,f,e,p,l,y),x={};h&&Object.entries(h).forEach(q=>{let[it,ot]=q;x[it]={$invalid:nr(ot,w,"$invalid"),$error:nr(ot,w,"$error"),$pending:nr(ot,w,"$pending"),$errors:Vr(ot,w,"$errors"),$silentErrors:Vr(ot,w,"$silentErrors")}});const{$dirty:I,$errors:L,$invalid:k,$anyDirty:P,$error:M,$pending:T,$touch:$,$reset:E,$silentErrors:A,$commit:V}=Xl(O,w,s),j=o?st({get:()=>B(v),set:q=>{I.value=!0;const it=B(n),ot=B(c);ot&&(ot[o]=m[o]),an(it[o])?it[o].value=q:it[o]=q}}):null;o&&p.$autoDirty&&ye(v,()=>{I.value||$();const q=B(c);q&&(q[o]=m[o])},{flush:"sync"});async function U(){return $(),p.$rewardEarly&&(V(),await rr()),await rr(),new Promise(q=>{if(!T.value)return q(!k.value);const it=ye(T,()=>{q(!k.value),it()})})}function nt(q){return(s.value||{})[q]}function ct(){an(c)?c.value=m:Object.keys(m).length===0?Object.keys(c).forEach(q=>{delete c[q]}):Object.assign(c,m)}return hn(he(he(he({},O),{},{$model:j,$dirty:I,$error:M,$errors:L,$invalid:k,$anyDirty:P,$pending:T,$touch:$,$reset:E,$path:f||Gl,$silentErrors:A,$validate:U,$commit:V},s&&{$getResultsForChild:nt,$clearExternalResults:ct,$validationGroups:x}),w))}class Yl{constructor(){this.storage=new Map}set(t,n,o){this.storage.set(t,{rules:n,result:o})}checkRulesValidity(t,n,o){const r=Object.keys(o),s=Object.keys(n);return s.length!==r.length||!s.every(i=>r.includes(i))?!1:s.every(i=>n[i].$params?Object.keys(n[i].$params).every(l=>B(o[i].$params[l])===B(n[i].$params[l])):!0)}get(t,n){const o=this.storage.get(t);if(!o)return;const{rules:r,result:s}=o,e=this.checkRulesValidity(t,n,r),i=s.$unwatch?s.$unwatch:()=>({});return e?s:{$dirty:s.$dirty,$partial:!0,$unwatch:i}}}const Rn={COLLECT_ALL:!0,COLLECT_NONE:!1},Br=Symbol("vuelidate#injectChildResults"),Gr=Symbol("vuelidate#removeChildResults");function Jl(a){let{$scope:t,instance:n}=a;const o={},r=lt([]),s=st(()=>r.value.reduce((f,u)=>(f[u]=B(o[u]),f),{}));function e(f,u){let{$registerAs:d,$scope:g,$stopPropagation:h}=u;h||t===Rn.COLLECT_NONE||g===Rn.COLLECT_NONE||t!==Rn.COLLECT_ALL&&t!==g||(o[d]=f,r.value.push(d))}n.__vuelidateInjectInstances=[].concat(n.__vuelidateInjectInstances||[],e);function i(f){r.value=r.value.filter(u=>u!==f),delete o[f]}n.__vuelidateRemoveInstances=[].concat(n.__vuelidateRemoveInstances||[],i);const l=sn(Br,[]);or(Br,n.__vuelidateInjectInstances);const c=sn(Gr,[]);return or(Gr,n.__vuelidateRemoveInstances),{childResults:s,sendValidationResultsToParent:l,removeValidationResultsFromParent:c}}function Io(a){return new Proxy(a,{get(t,n){return typeof t[n]=="object"?Io(t[n]):st(()=>t[n])}})}let Kr=0;function Ql(a,t){var n;let o=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};arguments.length===1&&(o=a,a=void 0,t=void 0);let{$registerAs:r,$scope:s=Rn.COLLECT_ALL,$stopPropagation:e,$externalResults:i,currentVueInstance:l}=o;const c=l||((n=qr())===null||n===void 0?void 0:n.proxy),f=c?c.$options:{};r||(Kr+=1,r=`_vuelidate_${Kr}`);const u=lt({}),d=new Yl,{childResults:g,sendValidationResultsToParent:h,removeValidationResultsFromParent:p}=c?Jl({$scope:s,instance:c}):{childResults:lt({})};if(!a&&f.validations){const v=f.validations;t=lt({}),_r(()=>{t.value=c,ye(()=>Fn(v)?v.call(t.value,new Io(t.value)):v,m=>{u.value=ur({validations:m,state:t,childResults:g,resultsCache:d,globalConfig:o,instance:c,externalResults:i||c.vuelidateExternalResults})},{immediate:!0})}),o=f.validationsConfig||o}else{const v=an(a)||Ul(a)?a:hn(a||{});ye(v,m=>{u.value=ur({validations:m,state:t,childResults:g,resultsCache:d,globalConfig:o,instance:c!=null?c:{},externalResults:i})},{immediate:!0})}return c&&(h.forEach(v=>v(u,{$registerAs:r,$scope:s,$stopPropagation:e})),to(()=>p.forEach(v=>v(r)))),st(()=>he(he({},B(u.value)),g.value))}function zr(a,t){var n=Object.keys(a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(a);t&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(a,r).enumerable})),n.push.apply(n,o)}return n}function dn(a){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?zr(Object(n),!0).forEach(function(o){Zl(a,o,n[o])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(n)):zr(Object(n)).forEach(function(o){Object.defineProperty(a,o,Object.getOwnPropertyDescriptor(n,o))})}return a}function Zl(a,t,n){return t in a?Object.defineProperty(a,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):a[t]=n,a}function Un(a){return typeof a=="function"}function fr(a){return a!==null&&typeof a=="object"&&!Array.isArray(a)}function Vn(a){return Un(a.$validator)?dn({},a):{$validator:a}}function Oo(a){return typeof a=="object"?a.$valid:a}function Do(a){return a.$validator||a}function ql(a,t){if(!fr(a))throw new Error(`[@vuelidate/validators]: First parameter to "withParams" should be an object, provided ${typeof a}`);if(!fr(t)&&!Un(t))throw new Error("[@vuelidate/validators]: Validator must be a function or object with $validator parameter");const n=Vn(t);return n.$params=dn(dn({},n.$params||{}),a),n}function _l(a,t){if(!Un(a)&&typeof B(a)!="string")throw new Error(`[@vuelidate/validators]: First parameter to "withMessage" should be string or a function returning a string, provided ${typeof a}`);if(!fr(t)&&!Un(t))throw new Error("[@vuelidate/validators]: Validator must be a function or object with $validator parameter");const n=Vn(t);return n.$message=a,n}function tc(a){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];const n=Vn(a);return dn(dn({},n),{},{$async:!0,$watchTargets:t})}function ec(a){return{$validator(t){for(var n=arguments.length,o=new Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];return B(t).reduce((s,e,i)=>{const l=Object.entries(e).reduce((c,f)=>{let[u,d]=f;const g=a[u]||{},h=Object.entries(g).reduce((p,v)=>{let[m,y]=v;const w=Do(y).call(this,d,e,i,...o),x=Oo(w);if(p.$data[m]=w,p.$data.$invalid=!x||!!p.$data.$invalid,p.$data.$error=p.$data.$invalid,!x){let I=y.$message||"";const L=y.$params||{};typeof I=="function"&&(I=I({$pending:!1,$invalid:!x,$params:L,$model:d,$response:w})),p.$errors.push({$property:u,$message:I,$params:L,$response:w,$model:d,$pending:!1,$validator:m})}return{$valid:p.$valid&&x,$data:p.$data,$errors:p.$errors}},{$valid:!0,$data:{},$errors:[]});return c.$data[u]=h.$data,c.$errors[u]=h.$errors,{$valid:c.$valid&&h.$valid,$data:c.$data,$errors:c.$errors}},{$valid:!0,$data:{},$errors:{}});return{$valid:s.$valid&&l.$valid,$data:s.$data.concat(l.$data),$errors:s.$errors.concat(l.$errors)}},{$valid:!0,$data:[],$errors:[]})},$message:t=>{let{$response:n}=t;return n?n.$errors.map(o=>Object.values(o).map(r=>r.map(s=>s.$message)).reduce((r,s)=>r.concat(s),[])):[]}}}const Bn=a=>{if(a=B(a),Array.isArray(a))return!!a.length;if(a==null)return!1;if(a===!1)return!0;if(a instanceof Date)return!isNaN(a.getTime());if(typeof a=="object"){for(let t in a)return!0;return!1}return!!String(a).length},Po=a=>(a=B(a),Array.isArray(a)?a.length:typeof a=="object"?Object.keys(a).length:String(a).length);function be(){for(var a=arguments.length,t=new Array(a),n=0;n<a;n++)t[n]=arguments[n];return o=>(o=B(o),!Bn(o)||t.every(r=>(r.lastIndex=0,r.test(o))))}var Xr=Object.freeze({__proto__:null,forEach:ec,len:Po,normalizeValidatorObject:Vn,regex:be,req:Bn,unwrap:B,unwrapNormalizedValidator:Do,unwrapValidatorResponse:Oo,withAsync:tc,withMessage:_l,withParams:ql});be(/^[a-zA-Z]*$/);be(/^[a-zA-Z0-9]*$/);be(/^\d*(\.\d+)?$/);const nc=/^(?:[A-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[A-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9]{2,}(?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;be(nc);function rc(a){return t=>!Bn(t)||Po(t)>=B(a)}function oc(a){return{$validator:rc(a),$message:t=>{let{$params:n}=t;return`This field should be at least ${n.min} characters long`},$params:{min:a,type:"minLength"}}}function ac(a){return typeof a=="string"&&(a=a.trim()),Bn(a)}var Yr={$validator:ac,$message:"Value is required",$params:{type:"required"}};const ic=/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i;be(ic);be(/(^[0-9]*$)|(^-[0-9]+$)/);be(/^[-]?\d*(\.\d+)?$/);const sc={style:{padding:"0"}},lc={id:"taskheadline"},cc={id:"taskForm"},uc={key:1,class:"alert alert-danger"},fc={key:0,style:{color:"red"}},dc={key:1,class:"text-danger"},hc={class:"row"},gc={class:"col-xs-3",style:{"padding-right":"2px"}},pc={class:"form-group"},vc=["value"],mc={class:"col-xs-3",style:{"padding-left":"2px","padding-right":"2px"}},yc={class:"col-xs-6",style:{"padding-left":"2px"}},bc=["title"],Sc={key:0,style:{color:"red"}},Ec={class:"form-group"},wc=gn({__name:"TaskEdit",props:{task:hr},emits:["TaskEditDone"],setup(a,{emit:t}){const{isAvailable:n,shareTask:o}=wo(),r=gr(),s=lt(!1),e=lt(!1);Hn(()=>{e.value=typeof navigator.share=="function"});const i=a,l=t,c=st(()=>i.task);ye(()=>i.task,()=>{g.value.$reset()});const f=st({get:()=>c.value.due?c.value.due.toISOString().substring(0,10):null,set:m=>c.value.due=new Date(m)}),u=m=>m>=re(new Date).startOf("day").toDate(),d={title:{required:Yr,minLength:Xr.withMessage("Title must be at least 3 chars long!",oc(3))},due:{required:Yr,future:Xr.withMessage("Due date must be in the future!",u)}},g=Ql(d,i.task,{$autoDirty:!0});async function h(){var m=await g.value.$validate();m?(console.log("Save"),l("TaskEditDone",!0)):console.warn("Validation failed!",g.value.$errors)}function p(){console.log("Cancel"),l("TaskEditDone",!1)}async function v(){if(!!c.value){s.value=!0;try{const m=await o(c.value);m.success?r.success(m.message||"Task shared successfully!"):r.error(m.message||"Failed to share task")}catch(m){console.error("Error sharing task:",m),r.error("An error occurred while sharing")}finally{s.value=!1}}}return(m,y)=>{var O,w;return wt(),Et("div",sc,[F("div",null,[F("h4",lc,"Task #"+Bt((O=a.task)==null?void 0:O.taskID),1),F("form",cc,[F("button",{id:"save",type:"button",title:"\xC4nderungen speichern",onClick:h,class:"btn btn-success",style:{"margin-right":"5px"}},y[5]||(y[5]=[F("span",{class:"glyphicon glyphicon-floppy-save"},null,-1),F("span",{class:"hidden-xs"},"Save",-1)])),F("button",{id:"cancel",type:"button",title:"\xC4nderungen verwerfen",onClick:p,class:"btn btn-warning"},y[6]||(y[6]=[F("span",{class:"glyphicon glyphicon-remove"},null,-1),F("span",{class:"hidden-xs"},"Cancel",-1)])),B(n)||e.value?(wt(),Et("button",{key:0,id:"share",type:"button",title:"Share this task",onClick:v,class:"btn share-button"},y[7]||(y[7]=[F("span",{class:"glyphicon glyphicon-share"},null,-1),F("span",{class:"hidden-xs"},"Share",-1)]))):te("",!0),B(g).$error?(wt(),Et("div",uc,[y[8]||(y[8]=F("h4",{class:"alert-heading"},"There are validation errors in this form:",-1)),(wt(!0),Et(Me,null,ln(B(g).$errors,x=>(wt(),Et("li",{key:x.$uid},[F("span",null,Bt(x.$property)+": "+Bt(x.$validator)+" ("+Bt(x.$message)+")",1)]))),128))])):te("",!0),F("div",{class:ge(["form-group",{"has-error":B(g).title.$error}])},[y[9]||(y[9]=F("label",{for:"tasktitle",class:"control-label"},"Title",-1)),y[10]||(y[10]=je()),B(g).title.$error?(wt(),Et("span",fc,"*")):te("",!0),oe(F("input",{id:"tasktitle",name:"tasktitle",type:"text","onUpdate:modelValue":y[0]||(y[0]=x=>c.value.title=x),required:"",class:"form-control"},null,512),[[ve,c.value.title]]),B(g).title.$error?(wt(),Et("div",dc,"Required and at least 3 letters!")):te("",!0)],2),F("div",hc,[F("div",gc,[F("div",pc,[y[11]||(y[11]=F("label",{for:"taskimportance",class:"control-label"},"Importance",-1)),oe(F("select",{id:"taskimportance",name:"taskimportance","onUpdate:modelValue":y[1]||(y[1]=x=>c.value.importance=x),class:"form-control"},[(wt(!0),Et(Me,null,ln(Object.keys(B(_e)).filter(x=>isNaN(Number(x))),x=>(wt(),Et("option",{key:x,value:B(_e)[x]},Bt(x),9,vc))),128))],512),[[oo,c.value.importance]])])]),F("div",mc,[y[12]||(y[12]=F("label",{for:"taskeffort",class:"control-label"},"Effort",-1)),oe(F("input",{id:"taskeffort",type:"number",name:"taskeffort","onUpdate:modelValue":y[2]||(y[2]=x=>c.value.effort=x),class:"form-control"},null,512),[[ve,c.value.effort]])]),F("div",yc,[F("div",{class:ge(["form-group",{"has-error":B(g).due.$error}])},[F("label",{for:"taskDue",class:"control-label",title:(w=c.value.due)==null?void 0:w.toString()},"Due",8,bc),y[13]||(y[13]=je()),B(g).due.$error?(wt(),Et("span",Sc,"*")):te("",!0),oe(F("input",{id:"taskdue",name:"taskdue",type:"date","onUpdate:modelValue":y[3]||(y[3]=x=>f.value=x),class:"form-control"},null,512),[[ve,f.value]])],2)])]),qe(kl,{task:a.task},null,8,["task"]),F("div",Ec,[y[14]||(y[14]=F("label",{for:"tasknote",class:"control-label"},"Note",-1)),oe(F("textarea",{id:"tasknote",name:"tasknote ",rows:"5","onUpdate:modelValue":y[4]||(y[4]=x=>c.value.note=x),class:"form-control"},null,512),[[ve,c.value.note]])])])])])}}});const xc=ao(wc,[["__scopeId","data-v-65d54c7a"]]),Tc={id:"col1"},Cc={style:{"margin-right":"5px"},id:"categoryCount"},Ic={class:"list-group scroll",id:"categoryList"},Oc=["onClick","onDrop","title"],Dc=["title","onClick"],Pc={id:"TaskHeadline"},$c={id:"taskCount",style:{"margin-right":"5px"}},Rc={id:"categoryCurrentName",style:{"font-weight":"600"}},Ac=["disabled"],Nc=["onClick","onDragstart","title"],jc=["name","id","checked","onChange"],Mc={style:{float:"right","margin-right":"10px"}},Lc=["title"],kc=["title","onClick"],Fc=["title"],Uc={key:1,id:"col3",class:"MLpanel col-xs-12 col-sm-6 col-md-4 col-lg-4"},Hc=gn({__name:"Home",setup(a){const t=gr(),{isAvailable:n,sendMessage:o}=wo(),r=hn({categorySet:lt(),taskSet:lt(),category:lt(),task:lt(),newCategoryName:lt(),newTaskTitle:lt()});let s=sn("MiracleListProxy")||new os(""),e=T=>re().startOf("day").isSame(re(T).startOf("day")),i=T=>re(T).startOf("day")<re().startOf("day"),l=T=>re(T).startOf("day")>re().startOf("day");const c=lt();let f="https://miraclelistbackend.azurewebsites.net/MLHub",u=lt(),d=st(()=>{var T;return((T=u.value)==null?void 0:T.state)==pt.Connected});eo(async()=>{var T,$;dt.HubConnectionInfo.value="SignalR: <span style='color:"+(d.value?"green":"red")+"'  title='"+f+" Connection-ID: "+((T=u.value)==null?void 0:T.connectionId)+"'>"+(($=u.value)==null?void 0:$.state)+"<span>"}),Hn(async()=>{console.log("Home:onMounted"),console.log("Token",dt.Token,dt.CurrentLoginInfo),await g(),console.log(`SignalR.Connecting to ${f}`),u.value=new Cl().withAutomaticReconnect().withUrl(f).build(),u.value.on("CategoryListUpdate",async(T,$)=>{console.log(`SignalR.CategoryListUpdate from ${T}: ${$}`),t.warning("Category List has been changed in another instance."),await g()}),u.value.on("TaskListUpdate",async(T,$)=>{var A;console.log(`SignalR.TaskListUpdate from ${T}: ${$}`);var E=(A=r.categorySet)==null?void 0:A.find(V=>V.categoryID==$);E&&t.success(`Tasks in Category ${$}: ${E.name} have been changed in another instance.`),$==r.category.categoryID&&await h(r.category)}),u.value.start().then(()=>{console.log(`SignalR.Connection started: (${u.value.state}): ${u.value.connectionId} ${dt.Token}!`),u.value.send("Register",dt.Token)}).catch(T=>console.error(T))}),dr(async()=>{var T;console.log("Home:onUnmounted"),(T=u.value)==null||T.stop(),dt.HubConnectionInfo.value=""});async function g(){console.log("ShowCategorySet",r.categorySet),r.categorySet=await s.categorySet(dt.Token),console.log("ShowCategorySet",r.categorySet),r.categorySet.length>0&&h(r.categorySet[0])}async function h(T){console.log("ShowTaskSet",T),r.category=T,T&&T.categoryID&&(dt.CurrentCategoryID.value=T.categoryID,r.taskSet=await s.taskSet(T.categoryID,dt.Token),r.taskSet=r.taskSet.sort(($,E)=>$.order-E.order),console.log("ShowTaskSet",r.taskSet),r.task=null)}function p(T){console.log("ShowTaskDetail",T),r.task=T}async function v(T){if(T==null||!T.categoryID)return;var $=`Do you want to remove category #${T.categoryID} <b>${T.name}</b> and all related tasks?`;async function E(){await s.deleteCategory(T.categoryID,dt.Token),await g(),r.category=r.categorySet.length>0?r.categorySet[0]:null,await L()}c.value&&c.value.Show(T.categoryID,$,E,null)}async function m(T){if(T==null||!T.taskID)return;var $=`Do you want to remove Task #${T.taskID} <b>${T.title}</b>?`;async function E(){T.taskID&&await s.deleteTask(T.taskID,dt.Token),await h(r.category),r.task=null,await k()}c.value&&c.value.Show(T.taskID,$,E,null)}async function y(){if(!!r.newCategoryName){var T=await s.createCategory(r.newCategoryName,dt.Token);await g(),await h(T),r.newCategoryName="",await L()}}async function O(){if(!r.newTaskTitle||!r.category)return;console.log("createTask");let T=new hr({taskID:0,title:r.newTaskTitle,categoryID:r.category.categoryID,importance:_e.B,created:new Date,due:new Date,order:0,note:"",done:!1});T=await s.createTask(dt.Token,T),console.log("Home.createTask",T),await h(r.category),r.newTaskTitle="",await k()}async function w(T,$){console.log("Task \xC4NDERN",$),$=await s.changeTaskDone($.taskID,T.target.checked,dt.Token),console.log("Task GE\xC4NDERT",$),await k()}async function x(T){console.log("TaskEditDone",T,r.task),T&&r.task?(await s.changeTask(dt.Token,r.task),t.success("Saved."),o("Task Saved!"),await k()):await h(r.category),r.task=null}async function I(T,$){var V,j;let E=[];r.taskSet.forEach(async U=>{E.push(U.taskID)});let A=await s.changeTaskOrder((V=r.category)==null?void 0:V.categoryID,dt.Token,E);console.log(`ChangeTaskOrder Done: ${A} of ${(j=r.taskSet)==null?void 0:j.length}!`)}async function L(){console.log("SignalR.SendCategoryListUpdate",u.value.state),d.value?await u.value.send("CategoryListUpdate",dt.Token):console.warn("SignalR.connection: not connected!","")}async function k(){console.log("SignalR.SendTaskListUpdate",u.value.state),d.value?await u.value.send("TaskListUpdate",dt.Token,r.category.categoryID):console.warn("SignalR.connection: not connected!","")}function P(T,$){T.dataTransfer.setData("task",JSON.stringify($))}async function M(T,$){const E=JSON.parse(T.dataTransfer.getData("task"));console.log("Drop",E.taskID,E.categoryID,$.categoryID),E.categoryID=$.categoryID,await s.changeTask(dt.Token,E),await h(r.category)}return(T,$)=>(wt(),Et(Me,null,[qe(Al,{ref_key:"confirmDialog",ref:c},null,512),F("div",Tc,[r.categorySet?(wt(),Et("div",{key:0,class:ge(["MLpanel",r.task?"hidden-xs hidden-sm col-md-3 col-lg-2":"col-xs-4 col-sm-4 col-md-3 col-lg-2"])},[F("h4",null,[F("span",Cc,Bt(r.categorySet.length),1),$[6]||($[6]=F("span",null,"Categories",-1))]),oe(F("input",{name:"newCategoryName",type:"text",class:"form-control","onUpdate:modelValue":$[0]||($[0]=E=>r.newCategoryName=E),onChange:y,title:"Hit ENTER to add new category",placeholder:"new Category..."},null,544),[[ve,r.newCategoryName]]),F("ol",Ic,[(wt(!0),Et(Me,null,ln(r.categorySet,E=>{var A;return wt(),Et("li",{class:ge(["list-group-item",{MLselected:r.category&&E.categoryID==((A=r.category)==null?void 0:A.categoryID)}]),key:E.categoryID,onClick:V=>h(E),onDragover:$[1]||($[1]=Re(()=>{},["prevent"])),onDrop:V=>M(V,E),title:"Task Category #"+E.categoryID},[je(Bt(E.name)+" ",1),F("span",{id:"remove",style:{float:"right"},class:"close",title:`Remove Category #${E.categoryID}`,onClick:Re(V=>v(E),["stop"])},"\xD7",8,Dc)],42,Oc)}),128))])],2)):te("",!0)]),r.category&&r.taskSet?(wt(),Et("div",{key:0,id:"col2",class:ge(["MLpanel",r.task?"hidden-xs col-sm-6 col-md-5 col-lg-6":"col-xs-8 col-sm-8 col-md-9 col-lg-10"])},[F("h4",Pc,[F("span",$c,Bt(r.taskSet.length),1),$[7]||($[7]=F("span",null,"Tasks in",-1)),$[8]||($[8]=je()),F("span",Rc,Bt(r.category.name),1)]),oe(F("input",{name:"newTaskTitle",type:"text",class:"form-control",disabled:r.category==null,"onUpdate:modelValue":$[2]||($[2]=E=>r.newTaskTitle=E),onChange:O,title:"Hit ENTER to add new task",placeholder:"new Task..."},null,40,Ac),[[ve,r.newTaskTitle]]),qe(B(Xs),{id:"taskList",modelValue:r.taskSet,"onUpdate:modelValue":$[4]||($[4]=E=>r.taskSet=E),"item-key":"taskID",class:"list-group scroll",onEnd:I,tag:"ol"},{item:no(({element:E})=>{var A,V,j;return[F("li",{onClick:U=>p(E),draggable:"true",onDragstart:U=>P(U,E),class:ge(["list-group-item",{MLselected:r.task&&E.taskID==((A=r.task)==null?void 0:A.taskID)}]),title:"Task #"+E.taskID+"- created: "+B(re)(E.created).toLocaleString()},[F("input",{type:"checkbox",name:"done"+E.taskID,id:"done"+E.taskID,checked:E.done,class:"MLcheckbox",onClick:$[3]||($[3]=Re(()=>{},["stop"])),onChange:Re(U=>w(U,E),["stop"])},null,40,jc),je(" "+Bt(E.title)+" ",1),F("span",Mc,[F("span",{class:"badge badge-important",style:{"margin-right":"10px"},title:"Importance: "+B(_e)[(V=E.importance)!=null?V:0]+" ("+E.importance+")"},Bt(B(_e)[(j=E.importanc)!=null?j:0]),9,Lc),F("span",{id:"remove",title:`Remove Task #${E.taskID}`,class:"close",onClick:Re(U=>m(E),["stop"])},"\xD7",8,kc)]),E.due?(wt(),Et("div",{key:0,class:ge({"text-danger":B(i)(E.due),"text-warning":B(e)(E.due),"text-success":B(l)(E.due)}),title:"Task due: "+B(re)(E.due).toLocaleString()}," due "+Bt(B(e)(E.due)?"today":B(re)(E.due).fromNow()),11,Fc)):te("",!0)],42,Nc)]}),_:1},8,["modelValue"])],2)):te("",!0),r.task?(wt(),Et("div",Uc,[qe(xc,{task:r.task,"onUpdate:task":$[5]||($[5]=E=>r.task=E),onTaskEditDone:x},null,8,["task"])])):te("",!0)],64))}});const Bc=ao(Hc,[["__scopeId","data-v-b18520d9"]]);export{Bc as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
